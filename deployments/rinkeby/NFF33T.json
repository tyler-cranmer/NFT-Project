{
  "address": "0x00847b306Eb388Aa043A5C952F86458B466907FF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uriPrefix",
          "type": "string"
        }
      ],
      "name": "setUriPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uriSuffix",
          "type": "string"
        }
      ],
      "name": "setUriSuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "whiteListMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_reciever",
          "type": "address"
        }
      ],
      "name": "zeroCostMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc33e10c255fc52cab55ced3f8619e245e16d5792da8b65862d2cfad468f14367",
  "receipt": {
    "to": null,
    "from": "0x035bC96201666333294C5A04395Bb3618a2b6A11",
    "contractAddress": "0x00847b306Eb388Aa043A5C952F86458B466907FF",
    "transactionIndex": 20,
    "gasUsed": "4201472",
    "logsBloom": "0x
    "blockHash": "0x6622fc108881b8a3df5e9b864af87eda9d36dc06a7ca2b0bef7f9c0fa0e311c2",
    "transactionHash": "0xc33e10c255fc52cab55ced3f8619e245e16d5792da8b65862d2cfad468f14367",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 10499269,
        "transactionHash": "0xc33e10c255fc52cab55ced3f8619e245e16d5792da8b65862d2cfad468f14367",
        "address": "0x00847b306Eb388Aa043A5C952F86458B466907FF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000035bc96201666333294c5a04395bb3618a2b6a11"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x6622fc108881b8a3df5e9b864af87eda9d36dc06a7ca2b0bef7f9c0fa0e311c2"
      }
    ],
    "blockNumber": 10499269,
    "cumulativeGasUsed": "10498454",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "389596e89f62d8f73a10f54a2b8f43e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"whiteListMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"zeroCostMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT2.sol\":\"NFF33T\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/NFT2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\ncontract NFF33T is ERC721, Ownable {\\n  using Strings for uint256;\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private supply;\\n\\n  string public uriPrefix = '';\\n  string public uriSuffix = '.json';\\n  uint256 public cost = 0.02 ether;\\n  uint256 public maxSupply = 100;\\n  uint256 public maxMintAmount = 15;\\n  bool public paused = false;\\n\\n  bytes32 public merkleRoot =\\n    0x343750465941b29921f50a28e0e43050e5e1c2611a3ea8d7fe1001090d5e1436; //NEED TO ADD\\n  mapping(address => bool) public whitelistClaimed;\\n\\n  constructor() ERC721(\\\"NFF33T\\\", \\\"F33T\\\") {\\n    setUriPrefix(\\\"ipfs://QmdsHvfVX3EzXAzQMq7GYpGcaVSKm8YzqbBXmaDUwK3jUC/\\\"); //NEED TO CHANGE\\n  }\\n\\n  modifier mintCompliance(uint256 _mintAmount) {\\n    require(\\n      _mintAmount > 0 && _mintAmount <= maxMintAmount,\\n      'Invalid mint amount.'\\n    );\\n    require(\\n      supply.current() + _mintAmount <= maxSupply,\\n      'Max supply exceeded.'\\n    );\\n    _;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return supply.current();\\n  }\\n\\n  function mint(uint256 _mintAmount)\\n    public\\n    payable\\n    mintCompliance(_mintAmount)\\n  {\\n    require(!paused, 'The contract is paused.');\\n    require(msg.value >= cost * _mintAmount, 'Insufficient funds!');\\n\\n    _mintLoop(msg.sender, _mintAmount);\\n  }\\n\\n  function whiteListMint(bytes32[] calldata _merkleProof, uint256 _mintAmount)\\n    public\\n    payable\\n    mintCompliance(_mintAmount)\\n  {\\n    require(!paused, 'The contract is paused');\\n    require(!whitelistClaimed[msg.sender], 'Address already claimed');\\n\\n    bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n    require(\\n      MerkleProof.verify(_merkleProof, merkleRoot, leaf),\\n      'Invalide Merkle Proof'\\n    );\\n    whitelistClaimed[msg.sender] = true;\\n    _mintLoop(msg.sender, _mintAmount);\\n  }\\n\\n  function zeroCostMint(uint256 _mintAmount, address _reciever)\\n    public\\n    mintCompliance(_mintAmount)\\n    onlyOwner\\n  {\\n    _mintLoop(_reciever, _mintAmount);\\n  }\\n\\n  function walletOfOwner(address _owner)\\n    public\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 ownerTokenCount = balanceOf(_owner);\\n    uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\\n    uint256 currentTokenId = 1;\\n    uint256 ownedTokenIndex = 0;\\n\\n    while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {\\n      address currentTokenOwner = ownerOf(currentTokenId);\\n\\n      if (currentTokenOwner == _owner) {\\n        ownedTokenIds[ownedTokenIndex] = currentTokenId;\\n        ownedTokenIndex++;\\n      }\\n\\n      currentTokenId++;\\n    }\\n\\n    return ownedTokenIds;\\n  }\\n\\n  function tokenURI(uint256 _tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(\\n      _exists(_tokenId),\\n      'ERC721Metadata: URI query for nonexistent token'\\n    );\\n\\n    string memory currentBaseURI = _baseURI();\\n    return\\n      bytes(currentBaseURI).length > 0\\n        ? string(\\n          abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)\\n        )\\n        : '';\\n  }\\n\\n  function setCost(uint256 _newCost) public onlyOwner {\\n    cost = _newCost;\\n  }\\n\\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\n    maxMintAmount = _newmaxMintAmount;\\n  }\\n\\n  function setUriPrefix(string memory _uriPrefix) public onlyOwner {\\n    uriPrefix = _uriPrefix;\\n  }\\n\\n  function setUriSuffix(string memory _uriSuffix) public onlyOwner {\\n    uriSuffix = _uriSuffix;\\n  }\\n\\n  function setPause(bool _state) public onlyOwner {\\n    paused = _state;\\n  }\\n\\n  function getUriPrefix() public view returns (string memory) {\\n    return uriPrefix;\\n  }\\n\\n  function getUriSuffix() public view returns (string memory) {\\n    return uriSuffix;\\n  }\\n\\n  function getCost() public view returns (uint256) {\\n    return cost;\\n  }\\n\\n  function getMaxSupply() public view returns (uint256) {\\n    return maxSupply;\\n  }\\n\\n  function getMaxMintAmount() public view returns (uint256) {\\n    return maxMintAmount;\\n  }\\n\\n  function isPaused() public view returns (bool) {\\n    return paused;\\n  }\\n\\n  function withdraw() external onlyOwner {\\n    address payable to = payable(owner());\\n    to.transfer(address(this).balance);\\n  }\\n\\n  function _mintLoop(address _reciever, uint256 _mintAmount) internal {\\n    for (uint256 i = 0; i < _mintAmount; i++) {\\n      supply.increment();\\n      _safeMint(_reciever, supply.current());\\n    }\\n  }\\n\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return uriPrefix;\\n  }\\n}\\n\",\"keccak256\":\"0x5521d210ba937d309e026533367854ba6d221a1d371ccf6bf23ab7860430e097\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405180602001604052806000815250600890805190602001906200002b92919062000372565b506040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600990805190602001906200007992919062000372565b5066470de4df820000600a556064600b55600f600c556000600d60006101000a81548160ff0219169083151502179055507f343750465941b29921f50a28e0e43050e5e1c2611a3ea8d7fe1001090d5e143660001b600e55348015620000de57600080fd5b506040518060400160405280600681526020017f4e464633335400000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f463333540000000000000000000000000000000000000000000000000000000081525081600090805190602001906200016392919062000372565b5080600190805190602001906200017c92919062000372565b5050506200019f62000193620001cf60201b60201c565b620001d760201b60201c565b620001c960405180606001604052806036815260200162004b9f603691396200029d60201b60201c565b620004fc565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002ad620001cf60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002d36200034860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200032c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003239062000464565b60405180910390fd5b80600890805190602001906200034492919062000372565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620003809062000497565b90600052602060002090601f016020900481019282620003a45760008555620003f0565b82601f10620003bf57805160ff1916838001178555620003f0565b82800160010185558215620003f0579182015b82811115620003ef578251825591602001919060010190620003d2565b5b509050620003ff919062000403565b5090565b5b808211156200041e57600081600090555060010162000404565b5090565b60006200043160208362000486565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060208201905081810360008301526200047f8162000422565b9050919050565b600082825260208201905092915050565b60006002820490506001821680620004b057607f821691505b60208210811415620004c757620004c6620004cd565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b614693806200050c6000396000f3fe6080604052600436106102465760003560e01c806370a0823111610139578063b88d4fde116100b6578063d1d647941161007a578063d1d647941461083c578063d5abeb0114610867578063d6e7b8e414610892578063db4bec44146108bd578063e985e9c5146108fa578063f2fde38b1461093757610246565b8063b88d4fde14610766578063bd3e19d41461078f578063bedb86fb146107ba578063c30bf318146107e3578063c87b56dd146107ff57610246565b806395d89b41116100fd57806395d89b41146106a0578063a0712d68146106cb578063a22cb465146106e7578063ae7c5f7614610710578063b187bd261461073b57610246565b806370a08231146105cf578063715018a61461060c5780637ec4a659146106235780637f00c7a61461064c5780638da5cb5b1461067557610246565b80632eb4a7ab116101c75780634c0f38c21161018b5780634c0f38c2146104e65780635503a0e8146105115780635c975abb1461053c57806362b99ad4146105675780636352211e1461059257610246565b80632eb4a7ab146104155780633ccfd60b1461044057806342842e0e14610457578063438b63001461048057806344a0d68a146104bd57610246565b806316ba10e01161020e57806316ba10e01461034457806318160ddd1461036d57806322f6451a14610398578063239c70ae146103c157806323b872dd146103ec57610246565b806301ffc9a71461024b57806306fdde0314610288578063081812fc146102b3578063095ea7b3146102f057806313faede614610319575b600080fd5b34801561025757600080fd5b50610272600480360381019061026d9190613271565b610960565b60405161027f9190613e03565b60405180910390f35b34801561029457600080fd5b5061029d610a42565b6040516102aa9190613e39565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d59190613304565b610ad4565b6040516102e79190613d7a565b60405180910390f35b3480156102fc57600080fd5b50610317600480360381019061031291906131b4565b610b59565b005b34801561032557600080fd5b5061032e610c71565b60405161033b919061413b565b60405180910390f35b34801561035057600080fd5b5061036b600480360381019061036691906132c3565b610c77565b005b34801561037957600080fd5b50610382610d0d565b60405161038f919061413b565b60405180910390f35b3480156103a457600080fd5b506103bf60048036038101906103ba919061332d565b610d1e565b005b3480156103cd57600080fd5b506103d6610e54565b6040516103e3919061413b565b60405180910390f35b3480156103f857600080fd5b50610413600480360381019061040e91906130ae565b610e5a565b005b34801561042157600080fd5b5061042a610eba565b6040516104379190613e1e565b60405180910390f35b34801561044c57600080fd5b50610455610ec0565b005b34801561046357600080fd5b5061047e600480360381019061047991906130ae565b610f92565b005b34801561048c57600080fd5b506104a760048036038101906104a29190613049565b610fb2565b6040516104b49190613de1565b60405180910390f35b3480156104c957600080fd5b506104e460048036038101906104df9190613304565b611109565b005b3480156104f257600080fd5b506104fb61118f565b604051610508919061413b565b60405180910390f35b34801561051d57600080fd5b50610526611199565b6040516105339190613e39565b60405180910390f35b34801561054857600080fd5b50610551611227565b60405161055e9190613e03565b60405180910390f35b34801561057357600080fd5b5061057c61123a565b6040516105899190613e39565b60405180910390f35b34801561059e57600080fd5b506105b960048036038101906105b49190613304565b6112c8565b6040516105c69190613d7a565b60405180910390f35b3480156105db57600080fd5b506105f660048036038101906105f19190613049565b61137a565b604051610603919061413b565b60405180910390f35b34801561061857600080fd5b50610621611432565b005b34801561062f57600080fd5b5061064a600480360381019061064591906132c3565b6114ba565b005b34801561065857600080fd5b50610673600480360381019061066e9190613304565b611550565b005b34801561068157600080fd5b5061068a6115d6565b6040516106979190613d7a565b60405180910390f35b3480156106ac57600080fd5b506106b5611600565b6040516106c29190613e39565b60405180910390f35b6106e560048036038101906106e09190613304565b611692565b005b3480156106f357600080fd5b5061070e60048036038101906107099190613178565b6117eb565b005b34801561071c57600080fd5b5061072561196c565b6040516107329190613e39565b60405180910390f35b34801561074757600080fd5b506107506119fe565b60405161075d9190613e03565b60405180910390f35b34801561077257600080fd5b5061078d600480360381019061078891906130fd565b611a15565b005b34801561079b57600080fd5b506107a4611a77565b6040516107b1919061413b565b60405180910390f35b3480156107c657600080fd5b506107e160048036038101906107dc9190613248565b611a81565b005b6107fd60048036038101906107f891906131f0565b611b1a565b005b34801561080b57600080fd5b5061082660048036038101906108219190613304565b611dc3565b6040516108339190613e39565b60405180910390f35b34801561084857600080fd5b50610851611e6d565b60405161085e9190613e39565b60405180910390f35b34801561087357600080fd5b5061087c611eff565b604051610889919061413b565b60405180910390f35b34801561089e57600080fd5b506108a7611f05565b6040516108b4919061413b565b60405180910390f35b3480156108c957600080fd5b506108e460048036038101906108df9190613049565b611f0f565b6040516108f19190613e03565b60405180910390f35b34801561090657600080fd5b50610921600480360381019061091c9190613072565b611f2f565b60405161092e9190613e03565b60405180910390f35b34801561094357600080fd5b5061095e60048036038101906109599190613049565b611fc3565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a2b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a3b5750610a3a826120bb565b5b9050919050565b606060008054610a519061444d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7d9061444d565b8015610aca5780601f10610a9f57610100808354040283529160200191610aca565b820191906000526020600020905b815481529060010190602001808311610aad57829003601f168201915b5050505050905090565b6000610adf82612125565b610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590613ffb565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b64826112c8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcc906140bb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bf4612191565b73ffffffffffffffffffffffffffffffffffffffff161480610c235750610c2281610c1d612191565b611f2f565b5b610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5990613f5b565b60405180910390fd5b610c6c8383612199565b505050565b600a5481565b610c7f612191565b73ffffffffffffffffffffffffffffffffffffffff16610c9d6115d6565b73ffffffffffffffffffffffffffffffffffffffff1614610cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cea9061403b565b60405180910390fd5b8060099080519060200190610d09929190612e23565b5050565b6000610d196007612252565b905090565b81600081118015610d315750600c548111155b610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d679061401b565b60405180910390fd5b600b5481610d7e6007612252565b610d889190614278565b1115610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc09061411b565b60405180910390fd5b610dd1612191565b73ffffffffffffffffffffffffffffffffffffffff16610def6115d6565b73ffffffffffffffffffffffffffffffffffffffff1614610e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3c9061403b565b60405180910390fd5b610e4f8284612260565b505050565b600c5481565b610e6b610e65612191565b826122a0565b610eaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea1906140db565b60405180910390fd5b610eb583838361237e565b505050565b600e5481565b610ec8612191565b73ffffffffffffffffffffffffffffffffffffffff16610ee66115d6565b73ffffffffffffffffffffffffffffffffffffffff1614610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f339061403b565b60405180910390fd5b6000610f466115d6565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610f8e573d6000803e3d6000fd5b5050565b610fad83838360405180602001604052806000815250611a15565b505050565b60606000610fbf8361137a565b905060008167ffffffffffffffff811115611003577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110315781602001602082028036833780820191505090505b50905060006001905060005b838110801561104e5750600b548211155b156110fd57600061105e836112c8565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110e957828483815181106110ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505081806110e59061447f565b9250505b82806110f49061447f565b9350505061103d565b82945050505050919050565b611111612191565b73ffffffffffffffffffffffffffffffffffffffff1661112f6115d6565b73ffffffffffffffffffffffffffffffffffffffff1614611185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117c9061403b565b60405180910390fd5b80600a8190555050565b6000600b54905090565b600980546111a69061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546111d29061444d565b801561121f5780601f106111f45761010080835404028352916020019161121f565b820191906000526020600020905b81548152906001019060200180831161120257829003601f168201915b505050505081565b600d60009054906101000a900460ff1681565b600880546112479061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546112739061444d565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136890613f9b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e290613f7b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61143a612191565b73ffffffffffffffffffffffffffffffffffffffff166114586115d6565b73ffffffffffffffffffffffffffffffffffffffff16146114ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a59061403b565b60405180910390fd5b6114b860006125da565b565b6114c2612191565b73ffffffffffffffffffffffffffffffffffffffff166114e06115d6565b73ffffffffffffffffffffffffffffffffffffffff1614611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d9061403b565b60405180910390fd5b806008908051906020019061154c929190612e23565b5050565b611558612191565b73ffffffffffffffffffffffffffffffffffffffff166115766115d6565b73ffffffffffffffffffffffffffffffffffffffff16146115cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c39061403b565b60405180910390fd5b80600c8190555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461160f9061444d565b80601f016020809104026020016040519081016040528092919081815260200182805461163b9061444d565b80156116885780601f1061165d57610100808354040283529160200191611688565b820191906000526020600020905b81548152906001019060200180831161166b57829003601f168201915b5050505050905090565b806000811180156116a55750600c548111155b6116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db9061401b565b60405180910390fd5b600b54816116f26007612252565b6116fc9190614278565b111561173d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117349061411b565b60405180910390fd5b600d60009054906101000a900460ff161561178d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178490613fdb565b60405180910390fd5b81600a5461179b91906142ff565b3410156117dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d4906140fb565b60405180910390fd5b6117e73383612260565b5050565b6117f3612191565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185890613efb565b60405180910390fd5b806005600061186e612191565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661191b612191565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119609190613e03565b60405180910390a35050565b60606008805461197b9061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546119a79061444d565b80156119f45780601f106119c9576101008083540402835291602001916119f4565b820191906000526020600020905b8154815290600101906020018083116119d757829003601f168201915b5050505050905090565b6000600d60009054906101000a900460ff16905090565b611a26611a20612191565b836122a0565b611a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5c906140db565b60405180910390fd5b611a71848484846126a0565b50505050565b6000600a54905090565b611a89612191565b73ffffffffffffffffffffffffffffffffffffffff16611aa76115d6565b73ffffffffffffffffffffffffffffffffffffffff1614611afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af49061403b565b60405180910390fd5b80600d60006101000a81548160ff02191690831515021790555050565b80600081118015611b2d5750600c548111155b611b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b639061401b565b60405180910390fd5b600b5481611b7a6007612252565b611b849190614278565b1115611bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbc9061411b565b60405180910390fd5b600d60009054906101000a900460ff1615611c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0c90613e7b565b60405180910390fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c999061405b565b60405180910390fd5b600033604051602001611cb59190613d02565b604051602081830303815290604052805190602001209050611d1b858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600e54836126fc565b611d5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5190613f3b565b60405180910390fd5b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611dbc3384612260565b5050505050565b6060611dce82612125565b611e0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e049061409b565b60405180910390fd5b6000611e176127d8565b90506000815111611e375760405180602001604052806000815250611e65565b80611e418461286a565b6009604051602001611e5593929190613d49565b6040516020818303038152906040525b915050919050565b606060098054611e7c9061444d565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea89061444d565b8015611ef55780601f10611eca57610100808354040283529160200191611ef5565b820191906000526020600020905b815481529060010190602001808311611ed857829003601f168201915b5050505050905090565b600b5481565b6000600c54905090565b600f6020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611fcb612191565b73ffffffffffffffffffffffffffffffffffffffff16611fe96115d6565b73ffffffffffffffffffffffffffffffffffffffff161461203f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120369061403b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a690613e9b565b60405180910390fd5b6120b8816125da565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661220c836112c8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b60005b8181101561229b576122756007612a17565b612288836122836007612252565b612a2d565b80806122939061447f565b915050612263565b505050565b60006122ab82612125565b6122ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e190613f1b565b60405180910390fd5b60006122f5836112c8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061236457508373ffffffffffffffffffffffffffffffffffffffff1661234c84610ad4565b73ffffffffffffffffffffffffffffffffffffffff16145b8061237557506123748185611f2f565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661239e826112c8565b73ffffffffffffffffffffffffffffffffffffffff16146123f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123eb9061407b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245b90613edb565b60405180910390fd5b61246f838383612a4b565b61247a600082612199565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124ca9190614359565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125219190614278565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6126ab84848461237e565b6126b784848484612a50565b6126f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ed90613e5b565b60405180910390fd5b50505050565b60008082905060005b85518110156127ca576000868281518110612749577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905080831161278a57828160405160200161276d929190613d1d565b6040516020818303038152906040528051906020012092506127b6565b808360405160200161279d929190613d1d565b6040516020818303038152906040528051906020012092505b5080806127c29061447f565b915050612705565b508381149150509392505050565b6060600880546127e79061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546128139061444d565b80156128605780601f1061283557610100808354040283529160200191612860565b820191906000526020600020905b81548152906001019060200180831161284357829003601f168201915b5050505050905090565b606060008214156128b2576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612a12565b600082905060005b600082146128e45780806128cd9061447f565b915050600a826128dd91906142ce565b91506128ba565b60008167ffffffffffffffff811115612926577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156129585781602001600182028036833780820191505090505b5090505b60008514612a0b576001826129719190614359565b9150600a8561298091906144f6565b603061298c9190614278565b60f81b8183815181106129c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612a0491906142ce565b945061295c565b8093505050505b919050565b6001816000016000828254019250508190555050565b612a47828260405180602001604052806000815250612be7565b5050565b505050565b6000612a718473ffffffffffffffffffffffffffffffffffffffff16612c42565b15612bda578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612a9a612191565b8786866040518563ffffffff1660e01b8152600401612abc9493929190613d95565b602060405180830381600087803b158015612ad657600080fd5b505af1925050508015612b0757506040513d601f19601f82011682018060405250810190612b04919061329a565b60015b612b8a573d8060008114612b37576040519150601f19603f3d011682016040523d82523d6000602084013e612b3c565b606091505b50600081511415612b82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7990613e5b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612bdf565b600190505b949350505050565b612bf18383612c55565b612bfe6000848484612a50565b612c3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3490613e5b565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cbc90613fbb565b60405180910390fd5b612cce81612125565b15612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0590613ebb565b60405180910390fd5b612d1a60008383612a4b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d6a9190614278565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612e2f9061444d565b90600052602060002090601f016020900481019282612e515760008555612e98565b82601f10612e6a57805160ff1916838001178555612e98565b82800160010185558215612e98579182015b82811115612e97578251825591602001919060010190612e7c565b5b509050612ea59190612ea9565b5090565b5b80821115612ec2576000816000905550600101612eaa565b5090565b6000612ed9612ed484614187565b614156565b905082815260208101848484011115612ef157600080fd5b612efc84828561440b565b509392505050565b6000612f17612f12846141b7565b614156565b905082815260208101848484011115612f2f57600080fd5b612f3a84828561440b565b509392505050565b600081359050612f5181614601565b92915050565b60008083601f840112612f6957600080fd5b8235905067ffffffffffffffff811115612f8257600080fd5b602083019150836020820283011115612f9a57600080fd5b9250929050565b600081359050612fb081614618565b92915050565b600081359050612fc58161462f565b92915050565b600081519050612fda8161462f565b92915050565b600082601f830112612ff157600080fd5b8135613001848260208601612ec6565b91505092915050565b600082601f83011261301b57600080fd5b813561302b848260208601612f04565b91505092915050565b60008135905061304381614646565b92915050565b60006020828403121561305b57600080fd5b600061306984828501612f42565b91505092915050565b6000806040838503121561308557600080fd5b600061309385828601612f42565b92505060206130a485828601612f42565b9150509250929050565b6000806000606084860312156130c357600080fd5b60006130d186828701612f42565b93505060206130e286828701612f42565b92505060406130f386828701613034565b9150509250925092565b6000806000806080858703121561311357600080fd5b600061312187828801612f42565b945050602061313287828801612f42565b935050604061314387828801613034565b925050606085013567ffffffffffffffff81111561316057600080fd5b61316c87828801612fe0565b91505092959194509250565b6000806040838503121561318b57600080fd5b600061319985828601612f42565b92505060206131aa85828601612fa1565b9150509250929050565b600080604083850312156131c757600080fd5b60006131d585828601612f42565b92505060206131e685828601613034565b9150509250929050565b60008060006040848603121561320557600080fd5b600084013567ffffffffffffffff81111561321f57600080fd5b61322b86828701612f57565b9350935050602061323e86828701613034565b9150509250925092565b60006020828403121561325a57600080fd5b600061326884828501612fa1565b91505092915050565b60006020828403121561328357600080fd5b600061329184828501612fb6565b91505092915050565b6000602082840312156132ac57600080fd5b60006132ba84828501612fcb565b91505092915050565b6000602082840312156132d557600080fd5b600082013567ffffffffffffffff8111156132ef57600080fd5b6132fb8482850161300a565b91505092915050565b60006020828403121561331657600080fd5b600061332484828501613034565b91505092915050565b6000806040838503121561334057600080fd5b600061334e85828601613034565b925050602061335f85828601612f42565b9150509250929050565b60006133758383613ce4565b60208301905092915050565b61338a8161438d565b82525050565b6133a161339c8261438d565b6144c8565b82525050565b60006133b28261420c565b6133bc818561423a565b93506133c7836141e7565b8060005b838110156133f85781516133df8882613369565b97506133ea8361422d565b9250506001810190506133cb565b5085935050505092915050565b61340e8161439f565b82525050565b61341d816143ab565b82525050565b61343461342f826143ab565b6144da565b82525050565b600061344582614217565b61344f818561424b565b935061345f81856020860161441a565b613468816145e3565b840191505092915050565b600061347e82614222565b613488818561425c565b935061349881856020860161441a565b6134a1816145e3565b840191505092915050565b60006134b782614222565b6134c1818561426d565b93506134d181856020860161441a565b80840191505092915050565b600081546134ea8161444d565b6134f4818661426d565b9450600182166000811461350f576001811461352057613553565b60ff19831686528186019350613553565b613529856141f7565b60005b8381101561354b5781548189015260018201915060208101905061352c565b838801955050505b50505092915050565b600061356960328361425c565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b60006135cf60168361425c565b91507f54686520636f6e747261637420697320706175736564000000000000000000006000830152602082019050919050565b600061360f60268361425c565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613675601c8361425c565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006136b560248361425c565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061371b60198361425c565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b600061375b602c8361425c565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006137c160158361425c565b91507f496e76616c696465204d65726b6c652050726f6f6600000000000000000000006000830152602082019050919050565b600061380160388361425c565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000613867602a8361425c565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006138cd60298361425c565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b600061393360208361425c565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b600061397360178361425c565b91507f54686520636f6e7472616374206973207061757365642e0000000000000000006000830152602082019050919050565b60006139b3602c8361425c565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613a1960148361425c565b91507f496e76616c6964206d696e7420616d6f756e742e0000000000000000000000006000830152602082019050919050565b6000613a5960208361425c565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613a9960178361425c565b91507f4164647265737320616c726561647920636c61696d65640000000000000000006000830152602082019050919050565b6000613ad960298361425c565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613b3f602f8361425c565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000613ba560218361425c565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c0b60318361425c565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613c7160138361425c565b91507f496e73756666696369656e742066756e647321000000000000000000000000006000830152602082019050919050565b6000613cb160148361425c565b91507f4d617820737570706c792065786365656465642e0000000000000000000000006000830152602082019050919050565b613ced81614401565b82525050565b613cfc81614401565b82525050565b6000613d0e8284613390565b60148201915081905092915050565b6000613d298285613423565b602082019150613d398284613423565b6020820191508190509392505050565b6000613d5582866134ac565b9150613d6182856134ac565b9150613d6d82846134dd565b9150819050949350505050565b6000602082019050613d8f6000830184613381565b92915050565b6000608082019050613daa6000830187613381565b613db76020830186613381565b613dc46040830185613cf3565b8181036060830152613dd6818461343a565b905095945050505050565b60006020820190508181036000830152613dfb81846133a7565b905092915050565b6000602082019050613e186000830184613405565b92915050565b6000602082019050613e336000830184613414565b92915050565b60006020820190508181036000830152613e538184613473565b905092915050565b60006020820190508181036000830152613e748161355c565b9050919050565b60006020820190508181036000830152613e94816135c2565b9050919050565b60006020820190508181036000830152613eb481613602565b9050919050565b60006020820190508181036000830152613ed481613668565b9050919050565b60006020820190508181036000830152613ef4816136a8565b9050919050565b60006020820190508181036000830152613f148161370e565b9050919050565b60006020820190508181036000830152613f348161374e565b9050919050565b60006020820190508181036000830152613f54816137b4565b9050919050565b60006020820190508181036000830152613f74816137f4565b9050919050565b60006020820190508181036000830152613f948161385a565b9050919050565b60006020820190508181036000830152613fb4816138c0565b9050919050565b60006020820190508181036000830152613fd481613926565b9050919050565b60006020820190508181036000830152613ff481613966565b9050919050565b60006020820190508181036000830152614014816139a6565b9050919050565b6000602082019050818103600083015261403481613a0c565b9050919050565b6000602082019050818103600083015261405481613a4c565b9050919050565b6000602082019050818103600083015261407481613a8c565b9050919050565b6000602082019050818103600083015261409481613acc565b9050919050565b600060208201905081810360008301526140b481613b32565b9050919050565b600060208201905081810360008301526140d481613b98565b9050919050565b600060208201905081810360008301526140f481613bfe565b9050919050565b6000602082019050818103600083015261411481613c64565b9050919050565b6000602082019050818103600083015261413481613ca4565b9050919050565b60006020820190506141506000830184613cf3565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561417d5761417c6145b4565b5b8060405250919050565b600067ffffffffffffffff8211156141a2576141a16145b4565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156141d2576141d16145b4565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061428382614401565b915061428e83614401565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142c3576142c2614527565b5b828201905092915050565b60006142d982614401565b91506142e483614401565b9250826142f4576142f3614556565b5b828204905092915050565b600061430a82614401565b915061431583614401565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561434e5761434d614527565b5b828202905092915050565b600061436482614401565b915061436f83614401565b92508282101561438257614381614527565b5b828203905092915050565b6000614398826143e1565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561443857808201518184015260208101905061441d565b83811115614447576000848401525b50505050565b6000600282049050600182168061446557607f821691505b6020821081141561447957614478614585565b5b50919050565b600061448a82614401565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144bd576144bc614527565b5b600182019050919050565b60006144d3826144e4565b9050919050565b6000819050919050565b60006144ef826145f4565b9050919050565b600061450182614401565b915061450c83614401565b92508261451c5761451b614556565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b61460a8161438d565b811461461557600080fd5b50565b6146218161439f565b811461462c57600080fd5b50565b614638816143b5565b811461464357600080fd5b50565b61464f81614401565b811461465a57600080fd5b5056fea2646970667358221220d0c7c820323454fafb0adbceab88dfbb96ffad4eb5f1d5ef3fdf21a3d1d08a9f64736f6c63430008000033697066733a2f2f516d6473487666565833457a58417a514d713747597047636156534b6d38597a716242586d614455774b336a55432f",
  "deployedBytecode": "0x6080604052600436106102465760003560e01c806370a0823111610139578063b88d4fde116100b6578063d1d647941161007a578063d1d647941461083c578063d5abeb0114610867578063d6e7b8e414610892578063db4bec44146108bd578063e985e9c5146108fa578063f2fde38b1461093757610246565b8063b88d4fde14610766578063bd3e19d41461078f578063bedb86fb146107ba578063c30bf318146107e3578063c87b56dd146107ff57610246565b806395d89b41116100fd57806395d89b41146106a0578063a0712d68146106cb578063a22cb465146106e7578063ae7c5f7614610710578063b187bd261461073b57610246565b806370a08231146105cf578063715018a61461060c5780637ec4a659146106235780637f00c7a61461064c5780638da5cb5b1461067557610246565b80632eb4a7ab116101c75780634c0f38c21161018b5780634c0f38c2146104e65780635503a0e8146105115780635c975abb1461053c57806362b99ad4146105675780636352211e1461059257610246565b80632eb4a7ab146104155780633ccfd60b1461044057806342842e0e14610457578063438b63001461048057806344a0d68a146104bd57610246565b806316ba10e01161020e57806316ba10e01461034457806318160ddd1461036d57806322f6451a14610398578063239c70ae146103c157806323b872dd146103ec57610246565b806301ffc9a71461024b57806306fdde0314610288578063081812fc146102b3578063095ea7b3146102f057806313faede614610319575b600080fd5b34801561025757600080fd5b50610272600480360381019061026d9190613271565b610960565b60405161027f9190613e03565b60405180910390f35b34801561029457600080fd5b5061029d610a42565b6040516102aa9190613e39565b60405180910390f35b3480156102bf57600080fd5b506102da60048036038101906102d59190613304565b610ad4565b6040516102e79190613d7a565b60405180910390f35b3480156102fc57600080fd5b50610317600480360381019061031291906131b4565b610b59565b005b34801561032557600080fd5b5061032e610c71565b60405161033b919061413b565b60405180910390f35b34801561035057600080fd5b5061036b600480360381019061036691906132c3565b610c77565b005b34801561037957600080fd5b50610382610d0d565b60405161038f919061413b565b60405180910390f35b3480156103a457600080fd5b506103bf60048036038101906103ba919061332d565b610d1e565b005b3480156103cd57600080fd5b506103d6610e54565b6040516103e3919061413b565b60405180910390f35b3480156103f857600080fd5b50610413600480360381019061040e91906130ae565b610e5a565b005b34801561042157600080fd5b5061042a610eba565b6040516104379190613e1e565b60405180910390f35b34801561044c57600080fd5b50610455610ec0565b005b34801561046357600080fd5b5061047e600480360381019061047991906130ae565b610f92565b005b34801561048c57600080fd5b506104a760048036038101906104a29190613049565b610fb2565b6040516104b49190613de1565b60405180910390f35b3480156104c957600080fd5b506104e460048036038101906104df9190613304565b611109565b005b3480156104f257600080fd5b506104fb61118f565b604051610508919061413b565b60405180910390f35b34801561051d57600080fd5b50610526611199565b6040516105339190613e39565b60405180910390f35b34801561054857600080fd5b50610551611227565b60405161055e9190613e03565b60405180910390f35b34801561057357600080fd5b5061057c61123a565b6040516105899190613e39565b60405180910390f35b34801561059e57600080fd5b506105b960048036038101906105b49190613304565b6112c8565b6040516105c69190613d7a565b60405180910390f35b3480156105db57600080fd5b506105f660048036038101906105f19190613049565b61137a565b604051610603919061413b565b60405180910390f35b34801561061857600080fd5b50610621611432565b005b34801561062f57600080fd5b5061064a600480360381019061064591906132c3565b6114ba565b005b34801561065857600080fd5b50610673600480360381019061066e9190613304565b611550565b005b34801561068157600080fd5b5061068a6115d6565b6040516106979190613d7a565b60405180910390f35b3480156106ac57600080fd5b506106b5611600565b6040516106c29190613e39565b60405180910390f35b6106e560048036038101906106e09190613304565b611692565b005b3480156106f357600080fd5b5061070e60048036038101906107099190613178565b6117eb565b005b34801561071c57600080fd5b5061072561196c565b6040516107329190613e39565b60405180910390f35b34801561074757600080fd5b506107506119fe565b60405161075d9190613e03565b60405180910390f35b34801561077257600080fd5b5061078d600480360381019061078891906130fd565b611a15565b005b34801561079b57600080fd5b506107a4611a77565b6040516107b1919061413b565b60405180910390f35b3480156107c657600080fd5b506107e160048036038101906107dc9190613248565b611a81565b005b6107fd60048036038101906107f891906131f0565b611b1a565b005b34801561080b57600080fd5b5061082660048036038101906108219190613304565b611dc3565b6040516108339190613e39565b60405180910390f35b34801561084857600080fd5b50610851611e6d565b60405161085e9190613e39565b60405180910390f35b34801561087357600080fd5b5061087c611eff565b604051610889919061413b565b60405180910390f35b34801561089e57600080fd5b506108a7611f05565b6040516108b4919061413b565b60405180910390f35b3480156108c957600080fd5b506108e460048036038101906108df9190613049565b611f0f565b6040516108f19190613e03565b60405180910390f35b34801561090657600080fd5b50610921600480360381019061091c9190613072565b611f2f565b60405161092e9190613e03565b60405180910390f35b34801561094357600080fd5b5061095e60048036038101906109599190613049565b611fc3565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a2b57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a3b5750610a3a826120bb565b5b9050919050565b606060008054610a519061444d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7d9061444d565b8015610aca5780601f10610a9f57610100808354040283529160200191610aca565b820191906000526020600020905b815481529060010190602001808311610aad57829003601f168201915b5050505050905090565b6000610adf82612125565b610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590613ffb565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b64826112c8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcc906140bb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bf4612191565b73ffffffffffffffffffffffffffffffffffffffff161480610c235750610c2281610c1d612191565b611f2f565b5b610c62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5990613f5b565b60405180910390fd5b610c6c8383612199565b505050565b600a5481565b610c7f612191565b73ffffffffffffffffffffffffffffffffffffffff16610c9d6115d6565b73ffffffffffffffffffffffffffffffffffffffff1614610cf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cea9061403b565b60405180910390fd5b8060099080519060200190610d09929190612e23565b5050565b6000610d196007612252565b905090565b81600081118015610d315750600c548111155b610d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d679061401b565b60405180910390fd5b600b5481610d7e6007612252565b610d889190614278565b1115610dc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc09061411b565b60405180910390fd5b610dd1612191565b73ffffffffffffffffffffffffffffffffffffffff16610def6115d6565b73ffffffffffffffffffffffffffffffffffffffff1614610e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3c9061403b565b60405180910390fd5b610e4f8284612260565b505050565b600c5481565b610e6b610e65612191565b826122a0565b610eaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea1906140db565b60405180910390fd5b610eb583838361237e565b505050565b600e5481565b610ec8612191565b73ffffffffffffffffffffffffffffffffffffffff16610ee66115d6565b73ffffffffffffffffffffffffffffffffffffffff1614610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f339061403b565b60405180910390fd5b6000610f466115d6565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610f8e573d6000803e3d6000fd5b5050565b610fad83838360405180602001604052806000815250611a15565b505050565b60606000610fbf8361137a565b905060008167ffffffffffffffff811115611003577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110315781602001602082028036833780820191505090505b50905060006001905060005b838110801561104e5750600b548211155b156110fd57600061105e836112c8565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110e957828483815181106110ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505081806110e59061447f565b9250505b82806110f49061447f565b9350505061103d565b82945050505050919050565b611111612191565b73ffffffffffffffffffffffffffffffffffffffff1661112f6115d6565b73ffffffffffffffffffffffffffffffffffffffff1614611185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117c9061403b565b60405180910390fd5b80600a8190555050565b6000600b54905090565b600980546111a69061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546111d29061444d565b801561121f5780601f106111f45761010080835404028352916020019161121f565b820191906000526020600020905b81548152906001019060200180831161120257829003601f168201915b505050505081565b600d60009054906101000a900460ff1681565b600880546112479061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546112739061444d565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611371576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136890613f9b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e290613f7b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61143a612191565b73ffffffffffffffffffffffffffffffffffffffff166114586115d6565b73ffffffffffffffffffffffffffffffffffffffff16146114ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a59061403b565b60405180910390fd5b6114b860006125da565b565b6114c2612191565b73ffffffffffffffffffffffffffffffffffffffff166114e06115d6565b73ffffffffffffffffffffffffffffffffffffffff1614611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d9061403b565b60405180910390fd5b806008908051906020019061154c929190612e23565b5050565b611558612191565b73ffffffffffffffffffffffffffffffffffffffff166115766115d6565b73ffffffffffffffffffffffffffffffffffffffff16146115cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c39061403b565b60405180910390fd5b80600c8190555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461160f9061444d565b80601f016020809104026020016040519081016040528092919081815260200182805461163b9061444d565b80156116885780601f1061165d57610100808354040283529160200191611688565b820191906000526020600020905b81548152906001019060200180831161166b57829003601f168201915b5050505050905090565b806000811180156116a55750600c548111155b6116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db9061401b565b60405180910390fd5b600b54816116f26007612252565b6116fc9190614278565b111561173d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117349061411b565b60405180910390fd5b600d60009054906101000a900460ff161561178d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178490613fdb565b60405180910390fd5b81600a5461179b91906142ff565b3410156117dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d4906140fb565b60405180910390fd5b6117e73383612260565b5050565b6117f3612191565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185890613efb565b60405180910390fd5b806005600061186e612191565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661191b612191565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516119609190613e03565b60405180910390a35050565b60606008805461197b9061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546119a79061444d565b80156119f45780601f106119c9576101008083540402835291602001916119f4565b820191906000526020600020905b8154815290600101906020018083116119d757829003601f168201915b5050505050905090565b6000600d60009054906101000a900460ff16905090565b611a26611a20612191565b836122a0565b611a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5c906140db565b60405180910390fd5b611a71848484846126a0565b50505050565b6000600a54905090565b611a89612191565b73ffffffffffffffffffffffffffffffffffffffff16611aa76115d6565b73ffffffffffffffffffffffffffffffffffffffff1614611afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af49061403b565b60405180910390fd5b80600d60006101000a81548160ff02191690831515021790555050565b80600081118015611b2d5750600c548111155b611b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b639061401b565b60405180910390fd5b600b5481611b7a6007612252565b611b849190614278565b1115611bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bbc9061411b565b60405180910390fd5b600d60009054906101000a900460ff1615611c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0c90613e7b565b60405180910390fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c999061405b565b60405180910390fd5b600033604051602001611cb59190613d02565b604051602081830303815290604052805190602001209050611d1b858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600e54836126fc565b611d5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5190613f3b565b60405180910390fd5b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611dbc3384612260565b5050505050565b6060611dce82612125565b611e0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e049061409b565b60405180910390fd5b6000611e176127d8565b90506000815111611e375760405180602001604052806000815250611e65565b80611e418461286a565b6009604051602001611e5593929190613d49565b6040516020818303038152906040525b915050919050565b606060098054611e7c9061444d565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea89061444d565b8015611ef55780601f10611eca57610100808354040283529160200191611ef5565b820191906000526020600020905b815481529060010190602001808311611ed857829003601f168201915b5050505050905090565b600b5481565b6000600c54905090565b600f6020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611fcb612191565b73ffffffffffffffffffffffffffffffffffffffff16611fe96115d6565b73ffffffffffffffffffffffffffffffffffffffff161461203f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120369061403b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a690613e9b565b60405180910390fd5b6120b8816125da565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661220c836112c8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b60005b8181101561229b576122756007612a17565b612288836122836007612252565b612a2d565b80806122939061447f565b915050612263565b505050565b60006122ab82612125565b6122ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e190613f1b565b60405180910390fd5b60006122f5836112c8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061236457508373ffffffffffffffffffffffffffffffffffffffff1661234c84610ad4565b73ffffffffffffffffffffffffffffffffffffffff16145b8061237557506123748185611f2f565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661239e826112c8565b73ffffffffffffffffffffffffffffffffffffffff16146123f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123eb9061407b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612464576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245b90613edb565b60405180910390fd5b61246f838383612a4b565b61247a600082612199565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546124ca9190614359565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125219190614278565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6126ab84848461237e565b6126b784848484612a50565b6126f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ed90613e5b565b60405180910390fd5b50505050565b60008082905060005b85518110156127ca576000868281518110612749577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905080831161278a57828160405160200161276d929190613d1d565b6040516020818303038152906040528051906020012092506127b6565b808360405160200161279d929190613d1d565b6040516020818303038152906040528051906020012092505b5080806127c29061447f565b915050612705565b508381149150509392505050565b6060600880546127e79061444d565b80601f01602080910402602001604051908101604052809291908181526020018280546128139061444d565b80156128605780601f1061283557610100808354040283529160200191612860565b820191906000526020600020905b81548152906001019060200180831161284357829003601f168201915b5050505050905090565b606060008214156128b2576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612a12565b600082905060005b600082146128e45780806128cd9061447f565b915050600a826128dd91906142ce565b91506128ba565b60008167ffffffffffffffff811115612926577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156129585781602001600182028036833780820191505090505b5090505b60008514612a0b576001826129719190614359565b9150600a8561298091906144f6565b603061298c9190614278565b60f81b8183815181106129c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612a0491906142ce565b945061295c565b8093505050505b919050565b6001816000016000828254019250508190555050565b612a47828260405180602001604052806000815250612be7565b5050565b505050565b6000612a718473ffffffffffffffffffffffffffffffffffffffff16612c42565b15612bda578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612a9a612191565b8786866040518563ffffffff1660e01b8152600401612abc9493929190613d95565b602060405180830381600087803b158015612ad657600080fd5b505af1925050508015612b0757506040513d601f19601f82011682018060405250810190612b04919061329a565b60015b612b8a573d8060008114612b37576040519150601f19603f3d011682016040523d82523d6000602084013e612b3c565b606091505b50600081511415612b82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7990613e5b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612bdf565b600190505b949350505050565b612bf18383612c55565b612bfe6000848484612a50565b612c3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3490613e5b565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cbc90613fbb565b60405180910390fd5b612cce81612125565b15612d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0590613ebb565b60405180910390fd5b612d1a60008383612a4b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d6a9190614278565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612e2f9061444d565b90600052602060002090601f016020900481019282612e515760008555612e98565b82601f10612e6a57805160ff1916838001178555612e98565b82800160010185558215612e98579182015b82811115612e97578251825591602001919060010190612e7c565b5b509050612ea59190612ea9565b5090565b5b80821115612ec2576000816000905550600101612eaa565b5090565b6000612ed9612ed484614187565b614156565b905082815260208101848484011115612ef157600080fd5b612efc84828561440b565b509392505050565b6000612f17612f12846141b7565b614156565b905082815260208101848484011115612f2f57600080fd5b612f3a84828561440b565b509392505050565b600081359050612f5181614601565b92915050565b60008083601f840112612f6957600080fd5b8235905067ffffffffffffffff811115612f8257600080fd5b602083019150836020820283011115612f9a57600080fd5b9250929050565b600081359050612fb081614618565b92915050565b600081359050612fc58161462f565b92915050565b600081519050612fda8161462f565b92915050565b600082601f830112612ff157600080fd5b8135613001848260208601612ec6565b91505092915050565b600082601f83011261301b57600080fd5b813561302b848260208601612f04565b91505092915050565b60008135905061304381614646565b92915050565b60006020828403121561305b57600080fd5b600061306984828501612f42565b91505092915050565b6000806040838503121561308557600080fd5b600061309385828601612f42565b92505060206130a485828601612f42565b9150509250929050565b6000806000606084860312156130c357600080fd5b60006130d186828701612f42565b93505060206130e286828701612f42565b92505060406130f386828701613034565b9150509250925092565b6000806000806080858703121561311357600080fd5b600061312187828801612f42565b945050602061313287828801612f42565b935050604061314387828801613034565b925050606085013567ffffffffffffffff81111561316057600080fd5b61316c87828801612fe0565b91505092959194509250565b6000806040838503121561318b57600080fd5b600061319985828601612f42565b92505060206131aa85828601612fa1565b9150509250929050565b600080604083850312156131c757600080fd5b60006131d585828601612f42565b92505060206131e685828601613034565b9150509250929050565b60008060006040848603121561320557600080fd5b600084013567ffffffffffffffff81111561321f57600080fd5b61322b86828701612f57565b9350935050602061323e86828701613034565b9150509250925092565b60006020828403121561325a57600080fd5b600061326884828501612fa1565b91505092915050565b60006020828403121561328357600080fd5b600061329184828501612fb6565b91505092915050565b6000602082840312156132ac57600080fd5b60006132ba84828501612fcb565b91505092915050565b6000602082840312156132d557600080fd5b600082013567ffffffffffffffff8111156132ef57600080fd5b6132fb8482850161300a565b91505092915050565b60006020828403121561331657600080fd5b600061332484828501613034565b91505092915050565b6000806040838503121561334057600080fd5b600061334e85828601613034565b925050602061335f85828601612f42565b9150509250929050565b60006133758383613ce4565b60208301905092915050565b61338a8161438d565b82525050565b6133a161339c8261438d565b6144c8565b82525050565b60006133b28261420c565b6133bc818561423a565b93506133c7836141e7565b8060005b838110156133f85781516133df8882613369565b97506133ea8361422d565b9250506001810190506133cb565b5085935050505092915050565b61340e8161439f565b82525050565b61341d816143ab565b82525050565b61343461342f826143ab565b6144da565b82525050565b600061344582614217565b61344f818561424b565b935061345f81856020860161441a565b613468816145e3565b840191505092915050565b600061347e82614222565b613488818561425c565b935061349881856020860161441a565b6134a1816145e3565b840191505092915050565b60006134b782614222565b6134c1818561426d565b93506134d181856020860161441a565b80840191505092915050565b600081546134ea8161444d565b6134f4818661426d565b9450600182166000811461350f576001811461352057613553565b60ff19831686528186019350613553565b613529856141f7565b60005b8381101561354b5781548189015260018201915060208101905061352c565b838801955050505b50505092915050565b600061356960328361425c565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b60006135cf60168361425c565b91507f54686520636f6e747261637420697320706175736564000000000000000000006000830152602082019050919050565b600061360f60268361425c565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613675601c8361425c565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006136b560248361425c565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061371b60198361425c565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b600061375b602c8361425c565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006137c160158361425c565b91507f496e76616c696465204d65726b6c652050726f6f6600000000000000000000006000830152602082019050919050565b600061380160388361425c565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b6000613867602a8361425c565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006138cd60298361425c565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b600061393360208361425c565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b600061397360178361425c565b91507f54686520636f6e7472616374206973207061757365642e0000000000000000006000830152602082019050919050565b60006139b3602c8361425c565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613a1960148361425c565b91507f496e76616c6964206d696e7420616d6f756e742e0000000000000000000000006000830152602082019050919050565b6000613a5960208361425c565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613a9960178361425c565b91507f4164647265737320616c726561647920636c61696d65640000000000000000006000830152602082019050919050565b6000613ad960298361425c565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613b3f602f8361425c565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000613ba560218361425c565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c0b60318361425c565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613c7160138361425c565b91507f496e73756666696369656e742066756e647321000000000000000000000000006000830152602082019050919050565b6000613cb160148361425c565b91507f4d617820737570706c792065786365656465642e0000000000000000000000006000830152602082019050919050565b613ced81614401565b82525050565b613cfc81614401565b82525050565b6000613d0e8284613390565b60148201915081905092915050565b6000613d298285613423565b602082019150613d398284613423565b6020820191508190509392505050565b6000613d5582866134ac565b9150613d6182856134ac565b9150613d6d82846134dd565b9150819050949350505050565b6000602082019050613d8f6000830184613381565b92915050565b6000608082019050613daa6000830187613381565b613db76020830186613381565b613dc46040830185613cf3565b8181036060830152613dd6818461343a565b905095945050505050565b60006020820190508181036000830152613dfb81846133a7565b905092915050565b6000602082019050613e186000830184613405565b92915050565b6000602082019050613e336000830184613414565b92915050565b60006020820190508181036000830152613e538184613473565b905092915050565b60006020820190508181036000830152613e748161355c565b9050919050565b60006020820190508181036000830152613e94816135c2565b9050919050565b60006020820190508181036000830152613eb481613602565b9050919050565b60006020820190508181036000830152613ed481613668565b9050919050565b60006020820190508181036000830152613ef4816136a8565b9050919050565b60006020820190508181036000830152613f148161370e565b9050919050565b60006020820190508181036000830152613f348161374e565b9050919050565b60006020820190508181036000830152613f54816137b4565b9050919050565b60006020820190508181036000830152613f74816137f4565b9050919050565b60006020820190508181036000830152613f948161385a565b9050919050565b60006020820190508181036000830152613fb4816138c0565b9050919050565b60006020820190508181036000830152613fd481613926565b9050919050565b60006020820190508181036000830152613ff481613966565b9050919050565b60006020820190508181036000830152614014816139a6565b9050919050565b6000602082019050818103600083015261403481613a0c565b9050919050565b6000602082019050818103600083015261405481613a4c565b9050919050565b6000602082019050818103600083015261407481613a8c565b9050919050565b6000602082019050818103600083015261409481613acc565b9050919050565b600060208201905081810360008301526140b481613b32565b9050919050565b600060208201905081810360008301526140d481613b98565b9050919050565b600060208201905081810360008301526140f481613bfe565b9050919050565b6000602082019050818103600083015261411481613c64565b9050919050565b6000602082019050818103600083015261413481613ca4565b9050919050565b60006020820190506141506000830184613cf3565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561417d5761417c6145b4565b5b8060405250919050565b600067ffffffffffffffff8211156141a2576141a16145b4565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156141d2576141d16145b4565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061428382614401565b915061428e83614401565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142c3576142c2614527565b5b828201905092915050565b60006142d982614401565b91506142e483614401565b9250826142f4576142f3614556565b5b828204905092915050565b600061430a82614401565b915061431583614401565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561434e5761434d614527565b5b828202905092915050565b600061436482614401565b915061436f83614401565b92508282101561438257614381614527565b5b828203905092915050565b6000614398826143e1565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561443857808201518184015260208101905061441d565b83811115614447576000848401525b50505050565b6000600282049050600182168061446557607f821691505b6020821081141561447957614478614585565b5b50919050565b600061448a82614401565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144bd576144bc614527565b5b600182019050919050565b60006144d3826144e4565b9050919050565b6000819050919050565b60006144ef826145f4565b9050919050565b600061450182614401565b915061450c83614401565b92508261451c5761451b614556565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b61460a8161438d565b811461461557600080fd5b50565b6146218161439f565b811461462c57600080fd5b50565b614638816143b5565b811461464357600080fd5b50565b61464f81614401565b811461465a57600080fd5b5056fea2646970667358221220d0c7c820323454fafb0adbceab88dfbb96ffad4eb5f1d5ef3fdf21a3d1d08a9f64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2540,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "supply",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1774_storage"
      },
      {
        "astId": 2543,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "uriPrefix",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2546,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "uriSuffix",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2549,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "cost",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2552,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "maxSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2555,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2558,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "paused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2561,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 2565,
        "contract": "contracts/NFT2.sol:NFF33T",
        "label": "whitelistClaimed",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1774_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1773,
            "contract": "contracts/NFT2.sol:NFF33T",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}