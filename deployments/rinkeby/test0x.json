{
  "address": "0x534b7C57e91A8f86f6311B7637324De0dFAE05f0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_newMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uriPrefix",
          "type": "string"
        }
      ],
      "name": "setUriPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uriSuffix",
          "type": "string"
        }
      ],
      "name": "setUriSuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "whiteListMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_reciever",
          "type": "address"
        }
      ],
      "name": "zeroCostMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5cec36dba12b8a73185a1377a670a407fb741e0bf2abd4f679a5e5a92585977",
  "receipt": {
    "to": null,
    "from": "0x035bC96201666333294C5A04395Bb3618a2b6A11",
    "contractAddress": "0x534b7C57e91A8f86f6311B7637324De0dFAE05f0",
    "transactionIndex": 18,
    "gasUsed": "4259666",
    "logsBloom": "0x
    "blockHash": "0x463f357ee40ce57dfddb751219767464d4db6af6be1851f3e519da00b9904bf1",
    "transactionHash": "0xf5cec36dba12b8a73185a1377a670a407fb741e0bf2abd4f679a5e5a92585977",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 10504756,
        "transactionHash": "0xf5cec36dba12b8a73185a1377a670a407fb741e0bf2abd4f679a5e5a92585977",
        "address": "0x534b7C57e91A8f86f6311B7637324De0dFAE05f0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000035bc96201666333294c5a04395bb3618a2b6a11"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x463f357ee40ce57dfddb751219767464d4db6af6be1851f3e519da00b9904bf1"
      }
    ],
    "blockNumber": 10504756,
    "cumulativeGasUsed": "6318720",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6243df972052fe81dda7b7967e362c7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_newMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"whiteListMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"zeroCostMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT2.sol\":\"test0x\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/NFT2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@openzeppelin/contracts/utils/cryptography/MerkleProof.sol';\\n\\ncontract test0x is ERC721, Ownable {\\n  using Strings for uint256;\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private supply;\\n\\n  string public uriPrefix = '';\\n  string public uriSuffix = '.json';\\n  uint256 public cost = 0.069 ether;\\n  uint256 public maxSupply = 6969;\\n  uint256 public maxMintAmount = 15;\\n  bool public paused = false;\\n\\n  bytes32 public merkleRoot =\\n    0x53c4e5e25bcbb26b82784b9793d8a74a02719aabab34c2d0358b26231e2f4bbe; //NEED TO ADD\\n  mapping(address => bool) public whitelistClaimed;\\n\\n  constructor() ERC721('test0x', 't0x') {\\n    setUriPrefix('ipfs://QmdsHvfVX3EzXAzQMq7GYpGcaVSKm8YzqbBXmaDUwK3jUC/'); //NEED TO CHANGE\\n  }\\n\\n  modifier mintCompliance(uint256 _mintAmount) {\\n    require(\\n      _mintAmount > 0 && _mintAmount <= maxMintAmount,\\n      'Invalid mint amount.'\\n    );\\n    require(\\n      supply.current() + _mintAmount <= maxSupply,\\n      'Max supply exceeded.'\\n    );\\n    _;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return supply.current();\\n  }\\n\\n  function mint(uint256 _mintAmount)\\n    public\\n    payable\\n    mintCompliance(_mintAmount)\\n  {\\n    require(!paused, 'The contract is paused.');\\n    require(msg.value >= cost * _mintAmount, 'Insufficient funds!');\\n\\n    _mintLoop(msg.sender, _mintAmount);\\n  }\\n\\n  function whiteListMint(bytes32[] calldata _merkleProof, uint256 _mintAmount)\\n    public\\n    payable\\n    mintCompliance(_mintAmount)\\n  {\\n    require(!paused, 'The contract is paused');\\n    require(!whitelistClaimed[msg.sender], 'Address already claimed');\\n\\n    bytes32 leaf = keccak256(abi.encodePacked(msg.sender));\\n    require(\\n      MerkleProof.verify(_merkleProof, merkleRoot, leaf),\\n      'Invalide Merkle Proof'\\n    );\\n    whitelistClaimed[msg.sender] = true;\\n    _mintLoop(msg.sender, _mintAmount);\\n  }\\n\\n  function zeroCostMint(uint256 _mintAmount, address _reciever)\\n    public\\n    mintCompliance(_mintAmount)\\n    onlyOwner\\n  {\\n    _mintLoop(_reciever, _mintAmount);\\n  }\\n\\n  function walletOfOwner(address _owner)\\n    public\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 ownerTokenCount = balanceOf(_owner);\\n    uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);\\n    uint256 currentTokenId = 1;\\n    uint256 ownedTokenIndex = 0;\\n\\n    while (ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply) {\\n      address currentTokenOwner = ownerOf(currentTokenId);\\n\\n      if (currentTokenOwner == _owner) {\\n        ownedTokenIds[ownedTokenIndex] = currentTokenId;\\n        ownedTokenIndex++;\\n      }\\n\\n      currentTokenId++;\\n    }\\n\\n    return ownedTokenIds;\\n  }\\n\\n  function tokenURI(uint256 _tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(\\n      _exists(_tokenId),\\n      'ERC721Metadata: URI query for nonexistent token'\\n    );\\n\\n    string memory currentBaseURI = _baseURI();\\n    return\\n      bytes(currentBaseURI).length > 0\\n        ? string(\\n          abi.encodePacked(currentBaseURI, _tokenId.toString(), uriSuffix)\\n        )\\n        : '';\\n  }\\n\\n  function setCost(uint256 _newCost) public onlyOwner {\\n    cost = _newCost;\\n  }\\n\\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\n    maxMintAmount = _newmaxMintAmount;\\n  }\\n\\n  function setUriPrefix(string memory _uriPrefix) public onlyOwner {\\n    uriPrefix = _uriPrefix;\\n  }\\n\\n  function setUriSuffix(string memory _uriSuffix) public onlyOwner {\\n    uriSuffix = _uriSuffix;\\n  }\\n\\n  function setPause(bool _state) public onlyOwner {\\n    paused = _state;\\n  }\\n\\n  function getUriPrefix() public view returns (string memory) {\\n    return uriPrefix;\\n  }\\n\\n  function getUriSuffix() public view returns (string memory) {\\n    return uriSuffix;\\n  }\\n\\n  function getCost() public view returns (uint256) {\\n    return cost;\\n  }\\n\\n  function getMaxSupply() public view returns (uint256) {\\n    return maxSupply;\\n  }\\n\\n  function getMaxMintAmount() public view returns (uint256) {\\n    return maxMintAmount;\\n  }\\n\\n  function isPaused() public view returns (bool) {\\n    return paused;\\n  }\\n\\n  function withdraw() external onlyOwner {\\n    address payable to = payable(owner());\\n    to.transfer(address(this).balance);\\n  }\\n\\n  function _mintLoop(address _reciever, uint256 _mintAmount) internal {\\n    for (uint256 i = 0; i < _mintAmount; i++) {\\n      supply.increment();\\n      _safeMint(_reciever, supply.current());\\n    }\\n  }\\n\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return uriPrefix;\\n  }\\n\\n  function setMerkleRoot(bytes32 _newMerkleRoot) public onlyOwner {\\n    merkleRoot = _newMerkleRoot;\\n  }\\n}\\n\",\"keccak256\":\"0xbb018488be2fd49248097c81dc174779151b7aea03ffa1164e19f387dbc9baa8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260405180602001604052806000815250600890805190602001906200002b92919062000373565b506040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600990805190602001906200007992919062000373565b5066f5232269808000600a55611b39600b55600f600c556000600d60006101000a81548160ff0219169083151502179055507f53c4e5e25bcbb26b82784b9793d8a74a02719aabab34c2d0358b26231e2f4bbe60001b600e55348015620000df57600080fd5b506040518060400160405280600681526020017f74657374307800000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f743078000000000000000000000000000000000000000000000000000000000081525081600090805190602001906200016492919062000373565b5080600190805190602001906200017d92919062000373565b505050620001a062000194620001d060201b60201c565b620001d860201b60201c565b620001ca60405180606001604052806036815260200162004caf603691396200029e60201b60201c565b620004fd565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002ae620001d060201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002d46200034960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16146200032d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003249062000465565b60405180910390fd5b80600890805190602001906200034592919062000373565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620003819062000498565b90600052602060002090601f016020900481019282620003a55760008555620003f1565b82601f10620003c057805160ff1916838001178555620003f1565b82800160010185558215620003f1579182015b82811115620003f0578251825591602001919060010190620003d3565b5b50905062000400919062000404565b5090565b5b808211156200041f57600081600090555060010162000405565b5090565b60006200043260208362000487565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006020820190508181036000830152620004808162000423565b9050919050565b600082825260208201905092915050565b60006002820490506001821680620004b157607f821691505b60208210811415620004c857620004c7620004ce565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6147a2806200050d6000396000f3fe6080604052600436106102515760003560e01c8063715018a611610139578063b88d4fde116100b6578063d1d647941161007a578063d1d6479414610870578063d5abeb011461089b578063d6e7b8e4146108c6578063db4bec44146108f1578063e985e9c51461092e578063f2fde38b1461096b57610251565b8063b88d4fde1461079a578063bd3e19d4146107c3578063bedb86fb146107ee578063c30bf31814610817578063c87b56dd1461083357610251565b806395d89b41116100fd57806395d89b41146106d4578063a0712d68146106ff578063a22cb4651461071b578063ae7c5f7614610744578063b187bd261461076f57610251565b8063715018a6146106175780637cb647591461062e5780637ec4a659146106575780637f00c7a6146106805780638da5cb5b146106a957610251565b80632eb4a7ab116101d25780634c0f38c2116101965780634c0f38c2146104f15780635503a0e81461051c5780635c975abb1461054757806362b99ad4146105725780636352211e1461059d57806370a08231146105da57610251565b80632eb4a7ab146104205780633ccfd60b1461044b57806342842e0e14610462578063438b63001461048b57806344a0d68a146104c857610251565b806316ba10e01161021957806316ba10e01461034f57806318160ddd1461037857806322f6451a146103a3578063239c70ae146103cc57806323b872dd146103f757610251565b806301ffc9a71461025657806306fdde0314610293578063081812fc146102be578063095ea7b3146102fb57806313faede614610324575b600080fd5b34801561026257600080fd5b5061027d60048036038101906102789190613369565b610994565b60405161028a9190613efb565b60405180910390f35b34801561029f57600080fd5b506102a8610a76565b6040516102b59190613f31565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e091906133fc565b610b08565b6040516102f29190613e72565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190613283565b610b8d565b005b34801561033057600080fd5b50610339610ca5565b6040516103469190614233565b60405180910390f35b34801561035b57600080fd5b50610376600480360381019061037191906133bb565b610cab565b005b34801561038457600080fd5b5061038d610d41565b60405161039a9190614233565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c59190613425565b610d52565b005b3480156103d857600080fd5b506103e1610e88565b6040516103ee9190614233565b60405180910390f35b34801561040357600080fd5b5061041e6004803603810190610419919061317d565b610e8e565b005b34801561042c57600080fd5b50610435610eee565b6040516104429190613f16565b60405180910390f35b34801561045757600080fd5b50610460610ef4565b005b34801561046e57600080fd5b506104896004803603810190610484919061317d565b610fc6565b005b34801561049757600080fd5b506104b260048036038101906104ad9190613118565b610fe6565b6040516104bf9190613ed9565b60405180910390f35b3480156104d457600080fd5b506104ef60048036038101906104ea91906133fc565b61113d565b005b3480156104fd57600080fd5b506105066111c3565b6040516105139190614233565b60405180910390f35b34801561052857600080fd5b506105316111cd565b60405161053e9190613f31565b60405180910390f35b34801561055357600080fd5b5061055c61125b565b6040516105699190613efb565b60405180910390f35b34801561057e57600080fd5b5061058761126e565b6040516105949190613f31565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf91906133fc565b6112fc565b6040516105d19190613e72565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc9190613118565b6113ae565b60405161060e9190614233565b60405180910390f35b34801561062357600080fd5b5061062c611466565b005b34801561063a57600080fd5b5061065560048036038101906106509190613340565b6114ee565b005b34801561066357600080fd5b5061067e600480360381019061067991906133bb565b611574565b005b34801561068c57600080fd5b506106a760048036038101906106a291906133fc565b61160a565b005b3480156106b557600080fd5b506106be611690565b6040516106cb9190613e72565b60405180910390f35b3480156106e057600080fd5b506106e96116ba565b6040516106f69190613f31565b60405180910390f35b610719600480360381019061071491906133fc565b61174c565b005b34801561072757600080fd5b50610742600480360381019061073d9190613247565b6118a5565b005b34801561075057600080fd5b50610759611a26565b6040516107669190613f31565b60405180910390f35b34801561077b57600080fd5b50610784611ab8565b6040516107919190613efb565b60405180910390f35b3480156107a657600080fd5b506107c160048036038101906107bc91906131cc565b611acf565b005b3480156107cf57600080fd5b506107d8611b31565b6040516107e59190614233565b60405180910390f35b3480156107fa57600080fd5b5061081560048036038101906108109190613317565b611b3b565b005b610831600480360381019061082c91906132bf565b611bd4565b005b34801561083f57600080fd5b5061085a600480360381019061085591906133fc565b611e7d565b6040516108679190613f31565b60405180910390f35b34801561087c57600080fd5b50610885611f27565b6040516108929190613f31565b60405180910390f35b3480156108a757600080fd5b506108b0611fb9565b6040516108bd9190614233565b60405180910390f35b3480156108d257600080fd5b506108db611fbf565b6040516108e89190614233565b60405180910390f35b3480156108fd57600080fd5b5061091860048036038101906109139190613118565b611fc9565b6040516109259190613efb565b60405180910390f35b34801561093a57600080fd5b5061095560048036038101906109509190613141565b611fe9565b6040516109629190613efb565b60405180910390f35b34801561097757600080fd5b50610992600480360381019061098d9190613118565b61207d565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a5f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a6f5750610a6e82612175565b5b9050919050565b606060008054610a8590614545565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab190614545565b8015610afe5780601f10610ad357610100808354040283529160200191610afe565b820191906000526020600020905b815481529060010190602001808311610ae157829003601f168201915b5050505050905090565b6000610b13826121df565b610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b49906140f3565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b98826112fc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c00906141b3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c2861224b565b73ffffffffffffffffffffffffffffffffffffffff161480610c575750610c5681610c5161224b565b611fe9565b5b610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d90614053565b60405180910390fd5b610ca08383612253565b505050565b600a5481565b610cb361224b565b73ffffffffffffffffffffffffffffffffffffffff16610cd1611690565b73ffffffffffffffffffffffffffffffffffffffff1614610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e90614133565b60405180910390fd5b8060099080519060200190610d3d929190612edd565b5050565b6000610d4d600761230c565b905090565b81600081118015610d655750600c548111155b610da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9b90614113565b60405180910390fd5b600b5481610db2600761230c565b610dbc9190614370565b1115610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490614213565b60405180910390fd5b610e0561224b565b73ffffffffffffffffffffffffffffffffffffffff16610e23611690565b73ffffffffffffffffffffffffffffffffffffffff1614610e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7090614133565b60405180910390fd5b610e83828461231a565b505050565b600c5481565b610e9f610e9961224b565b8261235a565b610ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed5906141d3565b60405180910390fd5b610ee9838383612438565b505050565b600e5481565b610efc61224b565b73ffffffffffffffffffffffffffffffffffffffff16610f1a611690565b73ffffffffffffffffffffffffffffffffffffffff1614610f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6790614133565b60405180910390fd5b6000610f7a611690565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610fc2573d6000803e3d6000fd5b5050565b610fe183838360405180602001604052806000815250611acf565b505050565b60606000610ff3836113ae565b905060008167ffffffffffffffff811115611037577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110655781602001602082028036833780820191505090505b50905060006001905060005b83811080156110825750600b548211155b15611131576000611092836112fc565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561111d5782848381518110611102577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050818061111990614577565b9250505b828061112890614577565b93505050611071565b82945050505050919050565b61114561224b565b73ffffffffffffffffffffffffffffffffffffffff16611163611690565b73ffffffffffffffffffffffffffffffffffffffff16146111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b090614133565b60405180910390fd5b80600a8190555050565b6000600b54905090565b600980546111da90614545565b80601f016020809104026020016040519081016040528092919081815260200182805461120690614545565b80156112535780601f1061122857610100808354040283529160200191611253565b820191906000526020600020905b81548152906001019060200180831161123657829003601f168201915b505050505081565b600d60009054906101000a900460ff1681565b6008805461127b90614545565b80601f01602080910402602001604051908101604052809291908181526020018280546112a790614545565b80156112f45780601f106112c9576101008083540402835291602001916112f4565b820191906000526020600020905b8154815290600101906020018083116112d757829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90614093565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561141f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141690614073565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61146e61224b565b73ffffffffffffffffffffffffffffffffffffffff1661148c611690565b73ffffffffffffffffffffffffffffffffffffffff16146114e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d990614133565b60405180910390fd5b6114ec6000612694565b565b6114f661224b565b73ffffffffffffffffffffffffffffffffffffffff16611514611690565b73ffffffffffffffffffffffffffffffffffffffff161461156a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156190614133565b60405180910390fd5b80600e8190555050565b61157c61224b565b73ffffffffffffffffffffffffffffffffffffffff1661159a611690565b73ffffffffffffffffffffffffffffffffffffffff16146115f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e790614133565b60405180910390fd5b8060089080519060200190611606929190612edd565b5050565b61161261224b565b73ffffffffffffffffffffffffffffffffffffffff16611630611690565b73ffffffffffffffffffffffffffffffffffffffff1614611686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167d90614133565b60405180910390fd5b80600c8190555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546116c990614545565b80601f01602080910402602001604051908101604052809291908181526020018280546116f590614545565b80156117425780601f1061171757610100808354040283529160200191611742565b820191906000526020600020905b81548152906001019060200180831161172557829003601f168201915b5050505050905090565b8060008111801561175f5750600c548111155b61179e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179590614113565b60405180910390fd5b600b54816117ac600761230c565b6117b69190614370565b11156117f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ee90614213565b60405180910390fd5b600d60009054906101000a900460ff1615611847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183e906140d3565b60405180910390fd5b81600a5461185591906143f7565b341015611897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188e906141f3565b60405180910390fd5b6118a1338361231a565b5050565b6118ad61224b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561191b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191290613ff3565b60405180910390fd5b806005600061192861224b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166119d561224b565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a1a9190613efb565b60405180910390a35050565b606060088054611a3590614545565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6190614545565b8015611aae5780601f10611a8357610100808354040283529160200191611aae565b820191906000526020600020905b815481529060010190602001808311611a9157829003601f168201915b5050505050905090565b6000600d60009054906101000a900460ff16905090565b611ae0611ada61224b565b8361235a565b611b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b16906141d3565b60405180910390fd5b611b2b8484848461275a565b50505050565b6000600a54905090565b611b4361224b565b73ffffffffffffffffffffffffffffffffffffffff16611b61611690565b73ffffffffffffffffffffffffffffffffffffffff1614611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae90614133565b60405180910390fd5b80600d60006101000a81548160ff02191690831515021790555050565b80600081118015611be75750600c548111155b611c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1d90614113565b60405180910390fd5b600b5481611c34600761230c565b611c3e9190614370565b1115611c7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7690614213565b60405180910390fd5b600d60009054906101000a900460ff1615611ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc690613f73565b60405180910390fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5390614153565b60405180910390fd5b600033604051602001611d6f9190613dfa565b604051602081830303815290604052805190602001209050611dd5858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600e54836127b6565b611e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0b90614033565b60405180910390fd5b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611e76338461231a565b5050505050565b6060611e88826121df565b611ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebe90614193565b60405180910390fd5b6000611ed1612892565b90506000815111611ef15760405180602001604052806000815250611f1f565b80611efb84612924565b6009604051602001611f0f93929190613e41565b6040516020818303038152906040525b915050919050565b606060098054611f3690614545565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6290614545565b8015611faf5780601f10611f8457610100808354040283529160200191611faf565b820191906000526020600020905b815481529060010190602001808311611f9257829003601f168201915b5050505050905090565b600b5481565b6000600c54905090565b600f6020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61208561224b565b73ffffffffffffffffffffffffffffffffffffffff166120a3611690565b73ffffffffffffffffffffffffffffffffffffffff16146120f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f090614133565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216090613f93565b60405180910390fd5b61217281612694565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166122c6836112fc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b60005b818110156123555761232f6007612ad1565b6123428361233d600761230c565b612ae7565b808061234d90614577565b91505061231d565b505050565b6000612365826121df565b6123a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b90614013565b60405180910390fd5b60006123af836112fc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061241e57508373ffffffffffffffffffffffffffffffffffffffff1661240684610b08565b73ffffffffffffffffffffffffffffffffffffffff16145b8061242f575061242e8185611fe9565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612458826112fc565b73ffffffffffffffffffffffffffffffffffffffff16146124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a590614173565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561251e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251590613fd3565b60405180910390fd5b612529838383612b05565b612534600082612253565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125849190614451565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125db9190614370565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612765848484612438565b61277184848484612b0a565b6127b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a790613f53565b60405180910390fd5b50505050565b60008082905060005b8551811015612884576000868281518110612803577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050808311612844578281604051602001612827929190613e15565b604051602081830303815290604052805190602001209250612870565b8083604051602001612857929190613e15565b6040516020818303038152906040528051906020012092505b50808061287c90614577565b9150506127bf565b508381149150509392505050565b6060600880546128a190614545565b80601f01602080910402602001604051908101604052809291908181526020018280546128cd90614545565b801561291a5780601f106128ef5761010080835404028352916020019161291a565b820191906000526020600020905b8154815290600101906020018083116128fd57829003601f168201915b5050505050905090565b6060600082141561296c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612acc565b600082905060005b6000821461299e57808061298790614577565b915050600a8261299791906143c6565b9150612974565b60008167ffffffffffffffff8111156129e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a125781602001600182028036833780820191505090505b5090505b60008514612ac557600182612a2b9190614451565b9150600a85612a3a91906145ee565b6030612a469190614370565b60f81b818381518110612a82577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612abe91906143c6565b9450612a16565b8093505050505b919050565b6001816000016000828254019250508190555050565b612b01828260405180602001604052806000815250612ca1565b5050565b505050565b6000612b2b8473ffffffffffffffffffffffffffffffffffffffff16612cfc565b15612c94578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b5461224b565b8786866040518563ffffffff1660e01b8152600401612b769493929190613e8d565b602060405180830381600087803b158015612b9057600080fd5b505af1925050508015612bc157506040513d601f19601f82011682018060405250810190612bbe9190613392565b60015b612c44573d8060008114612bf1576040519150601f19603f3d011682016040523d82523d6000602084013e612bf6565b606091505b50600081511415612c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3390613f53565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612c99565b600190505b949350505050565b612cab8383612d0f565b612cb86000848484612b0a565b612cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cee90613f53565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d76906140b3565b60405180910390fd5b612d88816121df565b15612dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dbf90613fb3565b60405180910390fd5b612dd460008383612b05565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e249190614370565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612ee990614545565b90600052602060002090601f016020900481019282612f0b5760008555612f52565b82601f10612f2457805160ff1916838001178555612f52565b82800160010185558215612f52579182015b82811115612f51578251825591602001919060010190612f36565b5b509050612f5f9190612f63565b5090565b5b80821115612f7c576000816000905550600101612f64565b5090565b6000612f93612f8e8461427f565b61424e565b905082815260208101848484011115612fab57600080fd5b612fb6848285614503565b509392505050565b6000612fd1612fcc846142af565b61424e565b905082815260208101848484011115612fe957600080fd5b612ff4848285614503565b509392505050565b60008135905061300b816146f9565b92915050565b60008083601f84011261302357600080fd5b8235905067ffffffffffffffff81111561303c57600080fd5b60208301915083602082028301111561305457600080fd5b9250929050565b60008135905061306a81614710565b92915050565b60008135905061307f81614727565b92915050565b6000813590506130948161473e565b92915050565b6000815190506130a98161473e565b92915050565b600082601f8301126130c057600080fd5b81356130d0848260208601612f80565b91505092915050565b600082601f8301126130ea57600080fd5b81356130fa848260208601612fbe565b91505092915050565b60008135905061311281614755565b92915050565b60006020828403121561312a57600080fd5b600061313884828501612ffc565b91505092915050565b6000806040838503121561315457600080fd5b600061316285828601612ffc565b925050602061317385828601612ffc565b9150509250929050565b60008060006060848603121561319257600080fd5b60006131a086828701612ffc565b93505060206131b186828701612ffc565b92505060406131c286828701613103565b9150509250925092565b600080600080608085870312156131e257600080fd5b60006131f087828801612ffc565b945050602061320187828801612ffc565b935050604061321287828801613103565b925050606085013567ffffffffffffffff81111561322f57600080fd5b61323b878288016130af565b91505092959194509250565b6000806040838503121561325a57600080fd5b600061326885828601612ffc565b92505060206132798582860161305b565b9150509250929050565b6000806040838503121561329657600080fd5b60006132a485828601612ffc565b92505060206132b585828601613103565b9150509250929050565b6000806000604084860312156132d457600080fd5b600084013567ffffffffffffffff8111156132ee57600080fd5b6132fa86828701613011565b9350935050602061330d86828701613103565b9150509250925092565b60006020828403121561332957600080fd5b60006133378482850161305b565b91505092915050565b60006020828403121561335257600080fd5b600061336084828501613070565b91505092915050565b60006020828403121561337b57600080fd5b600061338984828501613085565b91505092915050565b6000602082840312156133a457600080fd5b60006133b28482850161309a565b91505092915050565b6000602082840312156133cd57600080fd5b600082013567ffffffffffffffff8111156133e757600080fd5b6133f3848285016130d9565b91505092915050565b60006020828403121561340e57600080fd5b600061341c84828501613103565b91505092915050565b6000806040838503121561343857600080fd5b600061344685828601613103565b925050602061345785828601612ffc565b9150509250929050565b600061346d8383613ddc565b60208301905092915050565b61348281614485565b82525050565b61349961349482614485565b6145c0565b82525050565b60006134aa82614304565b6134b48185614332565b93506134bf836142df565b8060005b838110156134f05781516134d78882613461565b97506134e283614325565b9250506001810190506134c3565b5085935050505092915050565b61350681614497565b82525050565b613515816144a3565b82525050565b61352c613527826144a3565b6145d2565b82525050565b600061353d8261430f565b6135478185614343565b9350613557818560208601614512565b613560816146db565b840191505092915050565b60006135768261431a565b6135808185614354565b9350613590818560208601614512565b613599816146db565b840191505092915050565b60006135af8261431a565b6135b98185614365565b93506135c9818560208601614512565b80840191505092915050565b600081546135e281614545565b6135ec8186614365565b9450600182166000811461360757600181146136185761364b565b60ff1983168652818601935061364b565b613621856142ef565b60005b8381101561364357815481890152600182019150602081019050613624565b838801955050505b50505092915050565b6000613661603283614354565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b60006136c7601683614354565b91507f54686520636f6e747261637420697320706175736564000000000000000000006000830152602082019050919050565b6000613707602683614354565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061376d601c83614354565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006137ad602483614354565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613813601983614354565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b6000613853602c83614354565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006138b9601583614354565b91507f496e76616c696465204d65726b6c652050726f6f6600000000000000000000006000830152602082019050919050565b60006138f9603883614354565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061395f602a83614354565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006139c5602983614354565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a2b602083614354565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000613a6b601783614354565b91507f54686520636f6e7472616374206973207061757365642e0000000000000000006000830152602082019050919050565b6000613aab602c83614354565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613b11601483614354565b91507f496e76616c6964206d696e7420616d6f756e742e0000000000000000000000006000830152602082019050919050565b6000613b51602083614354565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613b91601783614354565b91507f4164647265737320616c726561647920636c61696d65640000000000000000006000830152602082019050919050565b6000613bd1602983614354565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c37602f83614354565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000613c9d602183614354565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d03603183614354565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613d69601383614354565b91507f496e73756666696369656e742066756e647321000000000000000000000000006000830152602082019050919050565b6000613da9601483614354565b91507f4d617820737570706c792065786365656465642e0000000000000000000000006000830152602082019050919050565b613de5816144f9565b82525050565b613df4816144f9565b82525050565b6000613e068284613488565b60148201915081905092915050565b6000613e21828561351b565b602082019150613e31828461351b565b6020820191508190509392505050565b6000613e4d82866135a4565b9150613e5982856135a4565b9150613e6582846135d5565b9150819050949350505050565b6000602082019050613e876000830184613479565b92915050565b6000608082019050613ea26000830187613479565b613eaf6020830186613479565b613ebc6040830185613deb565b8181036060830152613ece8184613532565b905095945050505050565b60006020820190508181036000830152613ef3818461349f565b905092915050565b6000602082019050613f1060008301846134fd565b92915050565b6000602082019050613f2b600083018461350c565b92915050565b60006020820190508181036000830152613f4b818461356b565b905092915050565b60006020820190508181036000830152613f6c81613654565b9050919050565b60006020820190508181036000830152613f8c816136ba565b9050919050565b60006020820190508181036000830152613fac816136fa565b9050919050565b60006020820190508181036000830152613fcc81613760565b9050919050565b60006020820190508181036000830152613fec816137a0565b9050919050565b6000602082019050818103600083015261400c81613806565b9050919050565b6000602082019050818103600083015261402c81613846565b9050919050565b6000602082019050818103600083015261404c816138ac565b9050919050565b6000602082019050818103600083015261406c816138ec565b9050919050565b6000602082019050818103600083015261408c81613952565b9050919050565b600060208201905081810360008301526140ac816139b8565b9050919050565b600060208201905081810360008301526140cc81613a1e565b9050919050565b600060208201905081810360008301526140ec81613a5e565b9050919050565b6000602082019050818103600083015261410c81613a9e565b9050919050565b6000602082019050818103600083015261412c81613b04565b9050919050565b6000602082019050818103600083015261414c81613b44565b9050919050565b6000602082019050818103600083015261416c81613b84565b9050919050565b6000602082019050818103600083015261418c81613bc4565b9050919050565b600060208201905081810360008301526141ac81613c2a565b9050919050565b600060208201905081810360008301526141cc81613c90565b9050919050565b600060208201905081810360008301526141ec81613cf6565b9050919050565b6000602082019050818103600083015261420c81613d5c565b9050919050565b6000602082019050818103600083015261422c81613d9c565b9050919050565b60006020820190506142486000830184613deb565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614275576142746146ac565b5b8060405250919050565b600067ffffffffffffffff82111561429a576142996146ac565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156142ca576142c96146ac565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061437b826144f9565b9150614386836144f9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143bb576143ba61461f565b5b828201905092915050565b60006143d1826144f9565b91506143dc836144f9565b9250826143ec576143eb61464e565b5b828204905092915050565b6000614402826144f9565b915061440d836144f9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144465761444561461f565b5b828202905092915050565b600061445c826144f9565b9150614467836144f9565b92508282101561447a5761447961461f565b5b828203905092915050565b6000614490826144d9565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614530578082015181840152602081019050614515565b8381111561453f576000848401525b50505050565b6000600282049050600182168061455d57607f821691505b602082108114156145715761457061467d565b5b50919050565b6000614582826144f9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145b5576145b461461f565b5b600182019050919050565b60006145cb826145dc565b9050919050565b6000819050919050565b60006145e7826146ec565b9050919050565b60006145f9826144f9565b9150614604836144f9565b9250826146145761461361464e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b61470281614485565b811461470d57600080fd5b50565b61471981614497565b811461472457600080fd5b50565b614730816144a3565b811461473b57600080fd5b50565b614747816144ad565b811461475257600080fd5b50565b61475e816144f9565b811461476957600080fd5b5056fea2646970667358221220594383962fc9b7b0863e60853c9d9560bf49ca222e60f2370afa985e8ec681b864736f6c63430008000033697066733a2f2f516d6473487666565833457a58417a514d713747597047636156534b6d38597a716242586d614455774b336a55432f",
  "deployedBytecode": "0x6080604052600436106102515760003560e01c8063715018a611610139578063b88d4fde116100b6578063d1d647941161007a578063d1d6479414610870578063d5abeb011461089b578063d6e7b8e4146108c6578063db4bec44146108f1578063e985e9c51461092e578063f2fde38b1461096b57610251565b8063b88d4fde1461079a578063bd3e19d4146107c3578063bedb86fb146107ee578063c30bf31814610817578063c87b56dd1461083357610251565b806395d89b41116100fd57806395d89b41146106d4578063a0712d68146106ff578063a22cb4651461071b578063ae7c5f7614610744578063b187bd261461076f57610251565b8063715018a6146106175780637cb647591461062e5780637ec4a659146106575780637f00c7a6146106805780638da5cb5b146106a957610251565b80632eb4a7ab116101d25780634c0f38c2116101965780634c0f38c2146104f15780635503a0e81461051c5780635c975abb1461054757806362b99ad4146105725780636352211e1461059d57806370a08231146105da57610251565b80632eb4a7ab146104205780633ccfd60b1461044b57806342842e0e14610462578063438b63001461048b57806344a0d68a146104c857610251565b806316ba10e01161021957806316ba10e01461034f57806318160ddd1461037857806322f6451a146103a3578063239c70ae146103cc57806323b872dd146103f757610251565b806301ffc9a71461025657806306fdde0314610293578063081812fc146102be578063095ea7b3146102fb57806313faede614610324575b600080fd5b34801561026257600080fd5b5061027d60048036038101906102789190613369565b610994565b60405161028a9190613efb565b60405180910390f35b34801561029f57600080fd5b506102a8610a76565b6040516102b59190613f31565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e091906133fc565b610b08565b6040516102f29190613e72565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d9190613283565b610b8d565b005b34801561033057600080fd5b50610339610ca5565b6040516103469190614233565b60405180910390f35b34801561035b57600080fd5b50610376600480360381019061037191906133bb565b610cab565b005b34801561038457600080fd5b5061038d610d41565b60405161039a9190614233565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c59190613425565b610d52565b005b3480156103d857600080fd5b506103e1610e88565b6040516103ee9190614233565b60405180910390f35b34801561040357600080fd5b5061041e6004803603810190610419919061317d565b610e8e565b005b34801561042c57600080fd5b50610435610eee565b6040516104429190613f16565b60405180910390f35b34801561045757600080fd5b50610460610ef4565b005b34801561046e57600080fd5b506104896004803603810190610484919061317d565b610fc6565b005b34801561049757600080fd5b506104b260048036038101906104ad9190613118565b610fe6565b6040516104bf9190613ed9565b60405180910390f35b3480156104d457600080fd5b506104ef60048036038101906104ea91906133fc565b61113d565b005b3480156104fd57600080fd5b506105066111c3565b6040516105139190614233565b60405180910390f35b34801561052857600080fd5b506105316111cd565b60405161053e9190613f31565b60405180910390f35b34801561055357600080fd5b5061055c61125b565b6040516105699190613efb565b60405180910390f35b34801561057e57600080fd5b5061058761126e565b6040516105949190613f31565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf91906133fc565b6112fc565b6040516105d19190613e72565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc9190613118565b6113ae565b60405161060e9190614233565b60405180910390f35b34801561062357600080fd5b5061062c611466565b005b34801561063a57600080fd5b5061065560048036038101906106509190613340565b6114ee565b005b34801561066357600080fd5b5061067e600480360381019061067991906133bb565b611574565b005b34801561068c57600080fd5b506106a760048036038101906106a291906133fc565b61160a565b005b3480156106b557600080fd5b506106be611690565b6040516106cb9190613e72565b60405180910390f35b3480156106e057600080fd5b506106e96116ba565b6040516106f69190613f31565b60405180910390f35b610719600480360381019061071491906133fc565b61174c565b005b34801561072757600080fd5b50610742600480360381019061073d9190613247565b6118a5565b005b34801561075057600080fd5b50610759611a26565b6040516107669190613f31565b60405180910390f35b34801561077b57600080fd5b50610784611ab8565b6040516107919190613efb565b60405180910390f35b3480156107a657600080fd5b506107c160048036038101906107bc91906131cc565b611acf565b005b3480156107cf57600080fd5b506107d8611b31565b6040516107e59190614233565b60405180910390f35b3480156107fa57600080fd5b5061081560048036038101906108109190613317565b611b3b565b005b610831600480360381019061082c91906132bf565b611bd4565b005b34801561083f57600080fd5b5061085a600480360381019061085591906133fc565b611e7d565b6040516108679190613f31565b60405180910390f35b34801561087c57600080fd5b50610885611f27565b6040516108929190613f31565b60405180910390f35b3480156108a757600080fd5b506108b0611fb9565b6040516108bd9190614233565b60405180910390f35b3480156108d257600080fd5b506108db611fbf565b6040516108e89190614233565b60405180910390f35b3480156108fd57600080fd5b5061091860048036038101906109139190613118565b611fc9565b6040516109259190613efb565b60405180910390f35b34801561093a57600080fd5b5061095560048036038101906109509190613141565b611fe9565b6040516109629190613efb565b60405180910390f35b34801561097757600080fd5b50610992600480360381019061098d9190613118565b61207d565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a5f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a6f5750610a6e82612175565b5b9050919050565b606060008054610a8590614545565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab190614545565b8015610afe5780601f10610ad357610100808354040283529160200191610afe565b820191906000526020600020905b815481529060010190602001808311610ae157829003601f168201915b5050505050905090565b6000610b13826121df565b610b52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b49906140f3565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b98826112fc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c00906141b3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c2861224b565b73ffffffffffffffffffffffffffffffffffffffff161480610c575750610c5681610c5161224b565b611fe9565b5b610c96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8d90614053565b60405180910390fd5b610ca08383612253565b505050565b600a5481565b610cb361224b565b73ffffffffffffffffffffffffffffffffffffffff16610cd1611690565b73ffffffffffffffffffffffffffffffffffffffff1614610d27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1e90614133565b60405180910390fd5b8060099080519060200190610d3d929190612edd565b5050565b6000610d4d600761230c565b905090565b81600081118015610d655750600c548111155b610da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9b90614113565b60405180910390fd5b600b5481610db2600761230c565b610dbc9190614370565b1115610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490614213565b60405180910390fd5b610e0561224b565b73ffffffffffffffffffffffffffffffffffffffff16610e23611690565b73ffffffffffffffffffffffffffffffffffffffff1614610e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7090614133565b60405180910390fd5b610e83828461231a565b505050565b600c5481565b610e9f610e9961224b565b8261235a565b610ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed5906141d3565b60405180910390fd5b610ee9838383612438565b505050565b600e5481565b610efc61224b565b73ffffffffffffffffffffffffffffffffffffffff16610f1a611690565b73ffffffffffffffffffffffffffffffffffffffff1614610f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6790614133565b60405180910390fd5b6000610f7a611690565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610fc2573d6000803e3d6000fd5b5050565b610fe183838360405180602001604052806000815250611acf565b505050565b60606000610ff3836113ae565b905060008167ffffffffffffffff811115611037577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110655781602001602082028036833780820191505090505b50905060006001905060005b83811080156110825750600b548211155b15611131576000611092836112fc565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561111d5782848381518110611102577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050818061111990614577565b9250505b828061112890614577565b93505050611071565b82945050505050919050565b61114561224b565b73ffffffffffffffffffffffffffffffffffffffff16611163611690565b73ffffffffffffffffffffffffffffffffffffffff16146111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b090614133565b60405180910390fd5b80600a8190555050565b6000600b54905090565b600980546111da90614545565b80601f016020809104026020016040519081016040528092919081815260200182805461120690614545565b80156112535780601f1061122857610100808354040283529160200191611253565b820191906000526020600020905b81548152906001019060200180831161123657829003601f168201915b505050505081565b600d60009054906101000a900460ff1681565b6008805461127b90614545565b80601f01602080910402602001604051908101604052809291908181526020018280546112a790614545565b80156112f45780601f106112c9576101008083540402835291602001916112f4565b820191906000526020600020905b8154815290600101906020018083116112d757829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139c90614093565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561141f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141690614073565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61146e61224b565b73ffffffffffffffffffffffffffffffffffffffff1661148c611690565b73ffffffffffffffffffffffffffffffffffffffff16146114e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d990614133565b60405180910390fd5b6114ec6000612694565b565b6114f661224b565b73ffffffffffffffffffffffffffffffffffffffff16611514611690565b73ffffffffffffffffffffffffffffffffffffffff161461156a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156190614133565b60405180910390fd5b80600e8190555050565b61157c61224b565b73ffffffffffffffffffffffffffffffffffffffff1661159a611690565b73ffffffffffffffffffffffffffffffffffffffff16146115f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e790614133565b60405180910390fd5b8060089080519060200190611606929190612edd565b5050565b61161261224b565b73ffffffffffffffffffffffffffffffffffffffff16611630611690565b73ffffffffffffffffffffffffffffffffffffffff1614611686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167d90614133565b60405180910390fd5b80600c8190555050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546116c990614545565b80601f01602080910402602001604051908101604052809291908181526020018280546116f590614545565b80156117425780601f1061171757610100808354040283529160200191611742565b820191906000526020600020905b81548152906001019060200180831161172557829003601f168201915b5050505050905090565b8060008111801561175f5750600c548111155b61179e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179590614113565b60405180910390fd5b600b54816117ac600761230c565b6117b69190614370565b11156117f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ee90614213565b60405180910390fd5b600d60009054906101000a900460ff1615611847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183e906140d3565b60405180910390fd5b81600a5461185591906143f7565b341015611897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188e906141f3565b60405180910390fd5b6118a1338361231a565b5050565b6118ad61224b565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561191b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191290613ff3565b60405180910390fd5b806005600061192861224b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166119d561224b565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611a1a9190613efb565b60405180910390a35050565b606060088054611a3590614545565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6190614545565b8015611aae5780601f10611a8357610100808354040283529160200191611aae565b820191906000526020600020905b815481529060010190602001808311611a9157829003601f168201915b5050505050905090565b6000600d60009054906101000a900460ff16905090565b611ae0611ada61224b565b8361235a565b611b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b16906141d3565b60405180910390fd5b611b2b8484848461275a565b50505050565b6000600a54905090565b611b4361224b565b73ffffffffffffffffffffffffffffffffffffffff16611b61611690565b73ffffffffffffffffffffffffffffffffffffffff1614611bb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bae90614133565b60405180910390fd5b80600d60006101000a81548160ff02191690831515021790555050565b80600081118015611be75750600c548111155b611c26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1d90614113565b60405180910390fd5b600b5481611c34600761230c565b611c3e9190614370565b1115611c7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7690614213565b60405180910390fd5b600d60009054906101000a900460ff1615611ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc690613f73565b60405180910390fd5b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5390614153565b60405180910390fd5b600033604051602001611d6f9190613dfa565b604051602081830303815290604052805190602001209050611dd5858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050600e54836127b6565b611e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0b90614033565b60405180910390fd5b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611e76338461231a565b5050505050565b6060611e88826121df565b611ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebe90614193565b60405180910390fd5b6000611ed1612892565b90506000815111611ef15760405180602001604052806000815250611f1f565b80611efb84612924565b6009604051602001611f0f93929190613e41565b6040516020818303038152906040525b915050919050565b606060098054611f3690614545565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6290614545565b8015611faf5780601f10611f8457610100808354040283529160200191611faf565b820191906000526020600020905b815481529060010190602001808311611f9257829003601f168201915b5050505050905090565b600b5481565b6000600c54905090565b600f6020528060005260406000206000915054906101000a900460ff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61208561224b565b73ffffffffffffffffffffffffffffffffffffffff166120a3611690565b73ffffffffffffffffffffffffffffffffffffffff16146120f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f090614133565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216090613f93565b60405180910390fd5b61217281612694565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166122c6836112fc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b60005b818110156123555761232f6007612ad1565b6123428361233d600761230c565b612ae7565b808061234d90614577565b91505061231d565b505050565b6000612365826121df565b6123a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239b90614013565b60405180910390fd5b60006123af836112fc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061241e57508373ffffffffffffffffffffffffffffffffffffffff1661240684610b08565b73ffffffffffffffffffffffffffffffffffffffff16145b8061242f575061242e8185611fe9565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612458826112fc565b73ffffffffffffffffffffffffffffffffffffffff16146124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a590614173565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561251e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251590613fd3565b60405180910390fd5b612529838383612b05565b612534600082612253565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125849190614451565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125db9190614370565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612765848484612438565b61277184848484612b0a565b6127b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a790613f53565b60405180910390fd5b50505050565b60008082905060005b8551811015612884576000868281518110612803577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050808311612844578281604051602001612827929190613e15565b604051602081830303815290604052805190602001209250612870565b8083604051602001612857929190613e15565b6040516020818303038152906040528051906020012092505b50808061287c90614577565b9150506127bf565b508381149150509392505050565b6060600880546128a190614545565b80601f01602080910402602001604051908101604052809291908181526020018280546128cd90614545565b801561291a5780601f106128ef5761010080835404028352916020019161291a565b820191906000526020600020905b8154815290600101906020018083116128fd57829003601f168201915b5050505050905090565b6060600082141561296c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612acc565b600082905060005b6000821461299e57808061298790614577565b915050600a8261299791906143c6565b9150612974565b60008167ffffffffffffffff8111156129e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a125781602001600182028036833780820191505090505b5090505b60008514612ac557600182612a2b9190614451565b9150600a85612a3a91906145ee565b6030612a469190614370565b60f81b818381518110612a82577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612abe91906143c6565b9450612a16565b8093505050505b919050565b6001816000016000828254019250508190555050565b612b01828260405180602001604052806000815250612ca1565b5050565b505050565b6000612b2b8473ffffffffffffffffffffffffffffffffffffffff16612cfc565b15612c94578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612b5461224b565b8786866040518563ffffffff1660e01b8152600401612b769493929190613e8d565b602060405180830381600087803b158015612b9057600080fd5b505af1925050508015612bc157506040513d601f19601f82011682018060405250810190612bbe9190613392565b60015b612c44573d8060008114612bf1576040519150601f19603f3d011682016040523d82523d6000602084013e612bf6565b606091505b50600081511415612c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3390613f53565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612c99565b600190505b949350505050565b612cab8383612d0f565b612cb86000848484612b0a565b612cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cee90613f53565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d76906140b3565b60405180910390fd5b612d88816121df565b15612dc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dbf90613fb3565b60405180910390fd5b612dd460008383612b05565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e249190614370565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b828054612ee990614545565b90600052602060002090601f016020900481019282612f0b5760008555612f52565b82601f10612f2457805160ff1916838001178555612f52565b82800160010185558215612f52579182015b82811115612f51578251825591602001919060010190612f36565b5b509050612f5f9190612f63565b5090565b5b80821115612f7c576000816000905550600101612f64565b5090565b6000612f93612f8e8461427f565b61424e565b905082815260208101848484011115612fab57600080fd5b612fb6848285614503565b509392505050565b6000612fd1612fcc846142af565b61424e565b905082815260208101848484011115612fe957600080fd5b612ff4848285614503565b509392505050565b60008135905061300b816146f9565b92915050565b60008083601f84011261302357600080fd5b8235905067ffffffffffffffff81111561303c57600080fd5b60208301915083602082028301111561305457600080fd5b9250929050565b60008135905061306a81614710565b92915050565b60008135905061307f81614727565b92915050565b6000813590506130948161473e565b92915050565b6000815190506130a98161473e565b92915050565b600082601f8301126130c057600080fd5b81356130d0848260208601612f80565b91505092915050565b600082601f8301126130ea57600080fd5b81356130fa848260208601612fbe565b91505092915050565b60008135905061311281614755565b92915050565b60006020828403121561312a57600080fd5b600061313884828501612ffc565b91505092915050565b6000806040838503121561315457600080fd5b600061316285828601612ffc565b925050602061317385828601612ffc565b9150509250929050565b60008060006060848603121561319257600080fd5b60006131a086828701612ffc565b93505060206131b186828701612ffc565b92505060406131c286828701613103565b9150509250925092565b600080600080608085870312156131e257600080fd5b60006131f087828801612ffc565b945050602061320187828801612ffc565b935050604061321287828801613103565b925050606085013567ffffffffffffffff81111561322f57600080fd5b61323b878288016130af565b91505092959194509250565b6000806040838503121561325a57600080fd5b600061326885828601612ffc565b92505060206132798582860161305b565b9150509250929050565b6000806040838503121561329657600080fd5b60006132a485828601612ffc565b92505060206132b585828601613103565b9150509250929050565b6000806000604084860312156132d457600080fd5b600084013567ffffffffffffffff8111156132ee57600080fd5b6132fa86828701613011565b9350935050602061330d86828701613103565b9150509250925092565b60006020828403121561332957600080fd5b60006133378482850161305b565b91505092915050565b60006020828403121561335257600080fd5b600061336084828501613070565b91505092915050565b60006020828403121561337b57600080fd5b600061338984828501613085565b91505092915050565b6000602082840312156133a457600080fd5b60006133b28482850161309a565b91505092915050565b6000602082840312156133cd57600080fd5b600082013567ffffffffffffffff8111156133e757600080fd5b6133f3848285016130d9565b91505092915050565b60006020828403121561340e57600080fd5b600061341c84828501613103565b91505092915050565b6000806040838503121561343857600080fd5b600061344685828601613103565b925050602061345785828601612ffc565b9150509250929050565b600061346d8383613ddc565b60208301905092915050565b61348281614485565b82525050565b61349961349482614485565b6145c0565b82525050565b60006134aa82614304565b6134b48185614332565b93506134bf836142df565b8060005b838110156134f05781516134d78882613461565b97506134e283614325565b9250506001810190506134c3565b5085935050505092915050565b61350681614497565b82525050565b613515816144a3565b82525050565b61352c613527826144a3565b6145d2565b82525050565b600061353d8261430f565b6135478185614343565b9350613557818560208601614512565b613560816146db565b840191505092915050565b60006135768261431a565b6135808185614354565b9350613590818560208601614512565b613599816146db565b840191505092915050565b60006135af8261431a565b6135b98185614365565b93506135c9818560208601614512565b80840191505092915050565b600081546135e281614545565b6135ec8186614365565b9450600182166000811461360757600181146136185761364b565b60ff1983168652818601935061364b565b613621856142ef565b60005b8381101561364357815481890152600182019150602081019050613624565b838801955050505b50505092915050565b6000613661603283614354565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b60006136c7601683614354565b91507f54686520636f6e747261637420697320706175736564000000000000000000006000830152602082019050919050565b6000613707602683614354565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061376d601c83614354565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b60006137ad602483614354565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613813601983614354565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b6000613853602c83614354565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006138b9601583614354565b91507f496e76616c696465204d65726b6c652050726f6f6600000000000000000000006000830152602082019050919050565b60006138f9603883614354565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061395f602a83614354565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006139c5602983614354565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613a2b602083614354565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000613a6b601783614354565b91507f54686520636f6e7472616374206973207061757365642e0000000000000000006000830152602082019050919050565b6000613aab602c83614354565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613b11601483614354565b91507f496e76616c6964206d696e7420616d6f756e742e0000000000000000000000006000830152602082019050919050565b6000613b51602083614354565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613b91601783614354565b91507f4164647265737320616c726561647920636c61696d65640000000000000000006000830152602082019050919050565b6000613bd1602983614354565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c37602f83614354565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000613c9d602183614354565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d03603183614354565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613d69601383614354565b91507f496e73756666696369656e742066756e647321000000000000000000000000006000830152602082019050919050565b6000613da9601483614354565b91507f4d617820737570706c792065786365656465642e0000000000000000000000006000830152602082019050919050565b613de5816144f9565b82525050565b613df4816144f9565b82525050565b6000613e068284613488565b60148201915081905092915050565b6000613e21828561351b565b602082019150613e31828461351b565b6020820191508190509392505050565b6000613e4d82866135a4565b9150613e5982856135a4565b9150613e6582846135d5565b9150819050949350505050565b6000602082019050613e876000830184613479565b92915050565b6000608082019050613ea26000830187613479565b613eaf6020830186613479565b613ebc6040830185613deb565b8181036060830152613ece8184613532565b905095945050505050565b60006020820190508181036000830152613ef3818461349f565b905092915050565b6000602082019050613f1060008301846134fd565b92915050565b6000602082019050613f2b600083018461350c565b92915050565b60006020820190508181036000830152613f4b818461356b565b905092915050565b60006020820190508181036000830152613f6c81613654565b9050919050565b60006020820190508181036000830152613f8c816136ba565b9050919050565b60006020820190508181036000830152613fac816136fa565b9050919050565b60006020820190508181036000830152613fcc81613760565b9050919050565b60006020820190508181036000830152613fec816137a0565b9050919050565b6000602082019050818103600083015261400c81613806565b9050919050565b6000602082019050818103600083015261402c81613846565b9050919050565b6000602082019050818103600083015261404c816138ac565b9050919050565b6000602082019050818103600083015261406c816138ec565b9050919050565b6000602082019050818103600083015261408c81613952565b9050919050565b600060208201905081810360008301526140ac816139b8565b9050919050565b600060208201905081810360008301526140cc81613a1e565b9050919050565b600060208201905081810360008301526140ec81613a5e565b9050919050565b6000602082019050818103600083015261410c81613a9e565b9050919050565b6000602082019050818103600083015261412c81613b04565b9050919050565b6000602082019050818103600083015261414c81613b44565b9050919050565b6000602082019050818103600083015261416c81613b84565b9050919050565b6000602082019050818103600083015261418c81613bc4565b9050919050565b600060208201905081810360008301526141ac81613c2a565b9050919050565b600060208201905081810360008301526141cc81613c90565b9050919050565b600060208201905081810360008301526141ec81613cf6565b9050919050565b6000602082019050818103600083015261420c81613d5c565b9050919050565b6000602082019050818103600083015261422c81613d9c565b9050919050565b60006020820190506142486000830184613deb565b92915050565b6000604051905081810181811067ffffffffffffffff82111715614275576142746146ac565b5b8060405250919050565b600067ffffffffffffffff82111561429a576142996146ac565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156142ca576142c96146ac565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061437b826144f9565b9150614386836144f9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143bb576143ba61461f565b5b828201905092915050565b60006143d1826144f9565b91506143dc836144f9565b9250826143ec576143eb61464e565b5b828204905092915050565b6000614402826144f9565b915061440d836144f9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156144465761444561461f565b5b828202905092915050565b600061445c826144f9565b9150614467836144f9565b92508282101561447a5761447961461f565b5b828203905092915050565b6000614490826144d9565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614530578082015181840152602081019050614515565b8381111561453f576000848401525b50505050565b6000600282049050600182168061455d57607f821691505b602082108114156145715761457061467d565b5b50919050565b6000614582826144f9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156145b5576145b461461f565b5b600182019050919050565b60006145cb826145dc565b9050919050565b6000819050919050565b60006145e7826146ec565b9050919050565b60006145f9826144f9565b9150614604836144f9565b9250826146145761461361464e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b61470281614485565b811461470d57600080fd5b50565b61471981614497565b811461472457600080fd5b50565b614730816144a3565b811461473b57600080fd5b50565b614747816144ad565b811461475257600080fd5b50565b61475e816144f9565b811461476957600080fd5b5056fea2646970667358221220594383962fc9b7b0863e60853c9d9560bf49ca222e60f2370afa985e8ec681b864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2540,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "supply",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1774_storage"
      },
      {
        "astId": 2543,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "uriPrefix",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2546,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "uriSuffix",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2549,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "cost",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2552,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "maxSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2555,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2558,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "paused",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2561,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 2565,
        "contract": "contracts/NFT2.sol:test0x",
        "label": "whitelistClaimed",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1774_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1773,
            "contract": "contracts/NFT2.sol:test0x",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}