{
  "address": "0xb94a8b00c16DF471c238347f716De19F3Bc83795",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBasedExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "tokenIdOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b7a0b3bbbba106be5ff760c9e69159bebbb9bb58bb6b4da6d73c4c4be3ad93f",
  "receipt": {
    "to": null,
    "from": "0x035bC96201666333294C5A04395Bb3618a2b6A11",
    "contractAddress": "0xb94a8b00c16DF471c238347f716De19F3Bc83795",
    "transactionIndex": 29,
    "gasUsed": "4160021",
    "logsBloom": "0x
    "blockHash": "0x2cecc1b7c2c9c15de400b8bd5ee19dba66af8bc73303cdb3a0f1a2835f1b58de",
    "transactionHash": "0x3b7a0b3bbbba106be5ff760c9e69159bebbb9bb58bb6b4da6d73c4c4be3ad93f",
    "logs": [
      {
        "transactionIndex": 29,
        "blockNumber": 10499468,
        "transactionHash": "0x3b7a0b3bbbba106be5ff760c9e69159bebbb9bb58bb6b4da6d73c4c4be3ad93f",
        "address": "0xb94a8b00c16DF471c238347f716De19F3Bc83795",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000035bc96201666333294c5a04395bb3618a2b6a11"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x2cecc1b7c2c9c15de400b8bd5ee19dba66af8bc73303cdb3a0f1a2835f1b58de"
      }
    ],
    "blockNumber": 10499468,
    "cumulativeGasUsed": "12275835",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "NFF33T",
    "f33t",
    "ipfs://QmdsHvfVX3EzXAzQMq7GYpGcaVSKm8YzqbBXmaDUwK3jUC/"
  ],
  "solcInputHash": "cc915dde5c915ead02fa56a8e9fee9e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBasedExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokenIdOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"NFTMEME\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ncontract NFTMEME is ERC721Enumerable, Ownable {\\n  using Strings for uint256;\\n\\n  string baseURI;\\n  string public baseExtension = '.json';\\n  uint256 public cost = 0.02 ether;\\n  uint256 public maxSupply = 6969;\\n  uint256 public maxMintAmount = 15;\\n  bool public paused = false;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    string memory _initBaseURI\\n  ) ERC721(_name, _symbol) {\\n    setBaseURI(_initBaseURI);\\n  }\\n\\n  // internal\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return baseURI;\\n  }\\n\\n  // public\\n  function mint(uint256 _mintAmount) public payable {\\n    uint256 supply = totalSupply();\\n    require(!paused, 'Sale has been paused');\\n    require(_mintAmount > 0, 'Must mint atleast 1 NFT');\\n    require(\\n      _mintAmount <= maxMintAmount,\\n      'There is a limit on minting too many at a time!'\\n    );\\n    require(\\n      supply + _mintAmount <= maxSupply,\\n      'Minting this many would exceed supply!'\\n    );\\n\\n    if (msg.sender != owner()) {\\n      require(msg.value >= cost * _mintAmount, 'Not enough ether sent!');\\n    }\\n\\n    for (uint256 i = 1; i <= _mintAmount; i++) {\\n      _safeMint(msg.sender, supply + i);\\n    }\\n  }\\n\\n  function tokenIdOfOwner(address _owner)\\n    public\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 tokenCount = balanceOf(_owner);\\n\\n    if (tokenCount == 0) {\\n      return new uint256[](0);\\n    } else {\\n      uint256[] memory tokenIds = new uint256[](tokenCount);\\n\\n      for (uint256 i = 0; i < tokenCount; i++) {\\n        tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\\n      }\\n      return tokenIds;\\n    }\\n  }\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(\\n      _exists(tokenId),\\n      'ERC721Metadata: URI query for nonexistent token'\\n    );\\n\\n    string memory currentBaseURI = _baseURI();\\n    return\\n      bytes(currentBaseURI).length > 0\\n        ? string(\\n          abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension)\\n        )\\n        : '';\\n  }\\n\\n  function setCost(uint256 _newCost) public onlyOwner {\\n    cost = _newCost;\\n  }\\n\\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\n    maxMintAmount = _newmaxMintAmount;\\n  }\\n\\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\\n    baseURI = _newBaseURI;\\n  }\\n\\n  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\\n    baseExtension = _newBaseExtension;\\n  }\\n\\n  function pause(bool _state) public onlyOwner {\\n    paused = _state;\\n  }\\n\\n  function getBaseURI() public view returns (string memory) {\\n    return baseURI;\\n  }\\n\\n  function getBasedExtension() public view returns (string memory) {\\n    return baseExtension;\\n  }\\n\\n  function getCost() public view returns (uint256) {\\n    return cost;\\n  }\\n\\n  function getMaxSupply() public view returns (uint256) {\\n    return maxSupply;\\n  }\\n\\n  function getMaxMintAmount() public view returns (uint256) {\\n    return maxMintAmount;\\n  }\\n\\n  function isPaused() public view returns (bool) {\\n    return paused;\\n  }\\n\\n  function withdraw() external onlyOwner {\\n    address payable to = payable(owner());\\n    to.transfer(address(this).balance);\\n  }\\n\\n  // function setRoyalties(\\n  //   uint256 _tokenId,\\n  //   address payable _royaltiesRecipientAddress,\\n  //   uint96 _percentageBasisPoints\\n  // ) public onlyOwner {\\n  //   LibPart.Part[] memory _royalties = new LibPart.Part[](1);\\n  //   _royalties[0].value = _percentageBasisPoints;\\n  //   _royalties[0].account = _royaltiesRecipientAddress;\\n  //   _saveRoyalties(_tokenId, _royalties);\\n  // }\\n\\n  // function supportsInterface(bytes4 interfaceId)\\n  //   public\\n  //   view\\n  //   virtual\\n  //   override(ERC721)\\n  //   returns (bool)\\n  // {\\n  //   if (interfaceId == LibRoyaltiesV2._INTERFACE_ID_ROYALTIES) {\\n  //     return true;\\n  //   }\\n  //   return super.supportsInterface(interfaceId);\\n  // }\\n}\\n\",\"keccak256\":\"0x294593b84be1f9bbcbd38ad7198dcf83a8d7ae8a8a38fef2709b9579616621d1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600581526020017f2e6a736f6e000000000000000000000000000000000000000000000000000000815250600c908051906020019062000051929190620002c8565b5066470de4df820000600d55611b39600e55600f80556000601060006101000a81548160ff0219169083151502179055503480156200008f57600080fd5b5060405162004c5c38038062004c5c8339818101604052810190620000b59190620003ea565b82828160009080519060200190620000cf929190620002c8565b508060019080519060200190620000e8929190620002c8565b5050506200010b620000ff6200012560201b60201c565b6200012d60201b60201c565b6200011c81620001f360201b60201c565b50505062000631565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002036200012560201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620002296200029e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000282576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200027990620004cd565b60405180910390fd5b80600b90805190602001906200029a929190620002c8565b5050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054620002d6906200059d565b90600052602060002090601f016020900481019282620002fa576000855562000346565b82601f106200031557805160ff191683800117855562000346565b8280016001018555821562000346579182015b828111156200034557825182559160200191906001019062000328565b5b50905062000355919062000359565b5090565b5b80821115620003745760008160009055506001016200035a565b5090565b60006200038f620003898462000523565b620004ef565b905082815260208101848484011115620003a857600080fd5b620003b584828562000567565b509392505050565b600082601f830112620003cf57600080fd5b8151620003e184826020860162000378565b91505092915050565b6000806000606084860312156200040057600080fd5b600084015167ffffffffffffffff8111156200041b57600080fd5b6200042986828701620003bd565b935050602084015167ffffffffffffffff8111156200044757600080fd5b6200045586828701620003bd565b925050604084015167ffffffffffffffff8111156200047357600080fd5b6200048186828701620003bd565b9150509250925092565b60006200049a60208362000556565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006020820190508181036000830152620004e8816200048b565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171562000519576200051862000602565b5b8060405250919050565b600067ffffffffffffffff82111562000541576200054062000602565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b60005b83811015620005875780820151818401526020810190506200056a565b8381111562000597576000848401525b50505050565b60006002820490506001821680620005b657607f821691505b60208210811415620005cd57620005cc620005d3565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61461b80620006416000396000f3fe6080604052600436106102255760003560e01c8063714c539811610123578063b88d4fde116100ab578063d6e7b8e41161006f578063d6e7b8e4146107ea578063da3ef23f14610815578063da87741b1461083e578063e985e9c51461087b578063f2fde38b146108b857610225565b8063b88d4fde14610703578063bd3e19d41461072c578063c668286214610757578063c87b56dd14610782578063d5abeb01146107bf57610225565b806392de3bd4116100f257806392de3bd41461063d57806395d89b4114610668578063a0712d6814610693578063a22cb465146106af578063b187bd26146106d857610225565b8063714c5398146105a7578063715018a6146105d25780637f00c7a6146105e95780638da5cb5b1461061257610225565b80632f745c59116101b15780634f6ccce7116101755780634f6ccce71461049c57806355f804b3146104d95780635c975abb146105025780636352211e1461052d57806370a082311461056a57610225565b80632f745c59146103cb5780633ccfd60b1461040857806342842e0e1461041f57806344a0d68a146104485780634c0f38c21461047157610225565b8063095ea7b3116101f8578063095ea7b3146102f857806313faede61461032157806318160ddd1461034c578063239c70ae1461037757806323b872dd146103a257610225565b806301ffc9a71461022a57806302329a291461026757806306fdde0314610290578063081812fc146102bb575b600080fd5b34801561023657600080fd5b50610251600480360381019061024c9190613281565b6108e1565b60405161025e9190613deb565b60405180910390f35b34801561027357600080fd5b5061028e60048036038101906102899190613258565b61095b565b005b34801561029c57600080fd5b506102a56109f4565b6040516102b29190613e06565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190613314565b610a86565b6040516102ef9190613d62565b60405180910390f35b34801561030457600080fd5b5061031f600480360381019061031a919061321c565b610b0b565b005b34801561032d57600080fd5b50610336610c23565b6040516103439190614108565b60405180910390f35b34801561035857600080fd5b50610361610c29565b60405161036e9190614108565b60405180910390f35b34801561038357600080fd5b5061038c610c36565b6040516103999190614108565b60405180910390f35b3480156103ae57600080fd5b506103c960048036038101906103c49190613116565b610c3c565b005b3480156103d757600080fd5b506103f260048036038101906103ed919061321c565b610c9c565b6040516103ff9190614108565b60405180910390f35b34801561041457600080fd5b5061041d610d41565b005b34801561042b57600080fd5b5061044660048036038101906104419190613116565b610e13565b005b34801561045457600080fd5b5061046f600480360381019061046a9190613314565b610e33565b005b34801561047d57600080fd5b50610486610eb9565b6040516104939190614108565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be9190613314565b610ec3565b6040516104d09190614108565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb91906132d3565b610f5a565b005b34801561050e57600080fd5b50610517610ff0565b6040516105249190613deb565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f9190613314565b611003565b6040516105619190613d62565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c91906130b1565b6110b5565b60405161059e9190614108565b60405180910390f35b3480156105b357600080fd5b506105bc61116d565b6040516105c99190613e06565b60405180910390f35b3480156105de57600080fd5b506105e76111ff565b005b3480156105f557600080fd5b50610610600480360381019061060b9190613314565b611287565b005b34801561061e57600080fd5b5061062761130d565b6040516106349190613d62565b60405180910390f35b34801561064957600080fd5b50610652611337565b60405161065f9190613e06565b60405180910390f35b34801561067457600080fd5b5061067d6113c9565b60405161068a9190613e06565b60405180910390f35b6106ad60048036038101906106a89190613314565b61145b565b005b3480156106bb57600080fd5b506106d660048036038101906106d191906131e0565b611655565b005b3480156106e457600080fd5b506106ed6117d6565b6040516106fa9190613deb565b60405180910390f35b34801561070f57600080fd5b5061072a60048036038101906107259190613165565b6117ed565b005b34801561073857600080fd5b5061074161184f565b60405161074e9190614108565b60405180910390f35b34801561076357600080fd5b5061076c611859565b6040516107799190613e06565b60405180910390f35b34801561078e57600080fd5b506107a960048036038101906107a49190613314565b6118e7565b6040516107b69190613e06565b60405180910390f35b3480156107cb57600080fd5b506107d4611991565b6040516107e19190614108565b60405180910390f35b3480156107f657600080fd5b506107ff611997565b60405161080c9190614108565b60405180910390f35b34801561082157600080fd5b5061083c600480360381019061083791906132d3565b6119a1565b005b34801561084a57600080fd5b50610865600480360381019061086091906130b1565b611a37565b6040516108729190613dc9565b60405180910390f35b34801561088757600080fd5b506108a2600480360381019061089d91906130da565b611bb3565b6040516108af9190613deb565b60405180910390f35b3480156108c457600080fd5b506108df60048036038101906108da91906130b1565b611c47565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610954575061095382611d3f565b5b9050919050565b610963611e21565b73ffffffffffffffffffffffffffffffffffffffff1661098161130d565b73ffffffffffffffffffffffffffffffffffffffff16146109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce90613fe8565b60405180910390fd5b80601060006101000a81548160ff02191690831515021790555050565b606060008054610a0390614410565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2f90614410565b8015610a7c5780601f10610a5157610100808354040283529160200191610a7c565b820191906000526020600020905b815481529060010190602001808311610a5f57829003601f168201915b5050505050905090565b6000610a9182611e29565b610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac790613fc8565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b1682611003565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7e90614068565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ba6611e21565b73ffffffffffffffffffffffffffffffffffffffff161480610bd55750610bd481610bcf611e21565b611bb3565b5b610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b90613f48565b60405180910390fd5b610c1e8383611e95565b505050565b600d5481565b6000600880549050905090565b600f5481565b610c4d610c47611e21565b82611f4e565b610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c83906140a8565b60405180910390fd5b610c9783838361202c565b505050565b6000610ca7836110b5565b8210610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf90613e28565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610d49611e21565b73ffffffffffffffffffffffffffffffffffffffff16610d6761130d565b73ffffffffffffffffffffffffffffffffffffffff1614610dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db490613fe8565b60405180910390fd5b6000610dc761130d565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610e0f573d6000803e3d6000fd5b5050565b610e2e838383604051806020016040528060008152506117ed565b505050565b610e3b611e21565b73ffffffffffffffffffffffffffffffffffffffff16610e5961130d565b73ffffffffffffffffffffffffffffffffffffffff1614610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea690613fe8565b60405180910390fd5b80600d8190555050565b6000600e54905090565b6000610ecd610c29565b8210610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f05906140c8565b60405180910390fd5b60088281548110610f48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b610f62611e21565b73ffffffffffffffffffffffffffffffffffffffff16610f8061130d565b73ffffffffffffffffffffffffffffffffffffffff1614610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90613fe8565b60405180910390fd5b80600b9080519060200190610fec929190612ed5565b5050565b601060009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a390613f88565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111d90613f68565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600b805461117c90614410565b80601f01602080910402602001604051908101604052809291908181526020018280546111a890614410565b80156111f55780601f106111ca576101008083540402835291602001916111f5565b820191906000526020600020905b8154815290600101906020018083116111d857829003601f168201915b5050505050905090565b611207611e21565b73ffffffffffffffffffffffffffffffffffffffff1661122561130d565b73ffffffffffffffffffffffffffffffffffffffff161461127b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127290613fe8565b60405180910390fd5b6112856000612288565b565b61128f611e21565b73ffffffffffffffffffffffffffffffffffffffff166112ad61130d565b73ffffffffffffffffffffffffffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90613fe8565b60405180910390fd5b80600f8190555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600c805461134690614410565b80601f016020809104026020016040519081016040528092919081815260200182805461137290614410565b80156113bf5780601f10611394576101008083540402835291602001916113bf565b820191906000526020600020905b8154815290600101906020018083116113a257829003601f168201915b5050505050905090565b6060600180546113d890614410565b80601f016020809104026020016040519081016040528092919081815260200182805461140490614410565b80156114515780601f1061142657610100808354040283529160200191611451565b820191906000526020600020905b81548152906001019060200180831161143457829003601f168201915b5050505050905090565b6000611465610c29565b9050601060009054906101000a900460ff16156114b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ae90613e48565b60405180910390fd5b600082116114fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f1906140e8565b60405180910390fd5b600f5482111561153f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153690614048565b60405180910390fd5b600e54828261154e9190614245565b111561158f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158690613e88565b60405180910390fd5b61159761130d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461161a5781600d546115d791906142cc565b341015611619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161090614088565b60405180910390fd5b5b6000600190505b8281116116505761163d3382846116389190614245565b61234e565b808061164890614442565b915050611621565b505050565b61165d611e21565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c290613f08565b60405180910390fd5b80600560006116d8611e21565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611785611e21565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117ca9190613deb565b60405180910390a35050565b6000601060009054906101000a900460ff16905090565b6117fe6117f8611e21565b83611f4e565b61183d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611834906140a8565b60405180910390fd5b6118498484848461236c565b50505050565b6000600d54905090565b600c805461186690614410565b80601f016020809104026020016040519081016040528092919081815260200182805461189290614410565b80156118df5780601f106118b4576101008083540402835291602001916118df565b820191906000526020600020905b8154815290600101906020018083116118c257829003601f168201915b505050505081565b60606118f282611e29565b611931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192890614028565b60405180910390fd5b600061193b6123c8565b9050600081511161195b5760405180602001604052806000815250611989565b806119658461245a565b600c60405160200161197993929190613d31565b6040516020818303038152906040525b915050919050565b600e5481565b6000600f54905090565b6119a9611e21565b73ffffffffffffffffffffffffffffffffffffffff166119c761130d565b73ffffffffffffffffffffffffffffffffffffffff1614611a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1490613fe8565b60405180910390fd5b80600c9080519060200190611a33929190612ed5565b5050565b60606000611a44836110b5565b90506000811415611ac757600067ffffffffffffffff811115611a90577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611abe5781602001602082028036833780820191505090505b50915050611bae565b60008167ffffffffffffffff811115611b09577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b375781602001602082028036833780820191505090505b50905060005b82811015611ba757611b4f8582610c9c565b828281518110611b88577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611b9f90614442565b915050611b3d565b5080925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c4f611e21565b73ffffffffffffffffffffffffffffffffffffffff16611c6d61130d565b73ffffffffffffffffffffffffffffffffffffffff1614611cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cba90613fe8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2a90613ea8565b60405180910390fd5b611d3c81612288565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611e0a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611e1a5750611e1982612607565b5b9050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f0883611003565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611f5982611e29565b611f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8f90613f28565b60405180910390fd5b6000611fa383611003565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061201257508373ffffffffffffffffffffffffffffffffffffffff16611ffa84610a86565b73ffffffffffffffffffffffffffffffffffffffff16145b8061202357506120228185611bb3565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661204c82611003565b73ffffffffffffffffffffffffffffffffffffffff16146120a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209990614008565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210990613ee8565b60405180910390fd5b61211d838383612671565b612128600082611e95565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121789190614326565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121cf9190614245565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612368828260405180602001604052806000815250612785565b5050565b61237784848461202c565b612383848484846127e0565b6123c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b990613e68565b60405180910390fd5b50505050565b6060600b80546123d790614410565b80601f016020809104026020016040519081016040528092919081815260200182805461240390614410565b80156124505780601f1061242557610100808354040283529160200191612450565b820191906000526020600020905b81548152906001019060200180831161243357829003601f168201915b5050505050905090565b606060008214156124a2576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612602565b600082905060005b600082146124d45780806124bd90614442565b915050600a826124cd919061429b565b91506124aa565b60008167ffffffffffffffff811115612516577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156125485781602001600182028036833780820191505090505b5090505b600085146125fb576001826125619190614326565b9150600a85612570919061448b565b603061257c9190614245565b60f81b8183815181106125b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125f4919061429b565b945061254c565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61267c838383612977565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126bf576126ba8161297c565b6126fe565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146126fd576126fc83826129c5565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127415761273c81612b32565b612780565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461277f5761277e8282612c75565b5b5b505050565b61278f8383612cf4565b61279c60008484846127e0565b6127db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d290613e68565b60405180910390fd5b505050565b60006128018473ffffffffffffffffffffffffffffffffffffffff16612ec2565b1561296a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261282a611e21565b8786866040518563ffffffff1660e01b815260040161284c9493929190613d7d565b602060405180830381600087803b15801561286657600080fd5b505af192505050801561289757506040513d601f19601f8201168201806040525081019061289491906132aa565b60015b61291a573d80600081146128c7576040519150601f19603f3d011682016040523d82523d6000602084013e6128cc565b606091505b50600081511415612912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290990613e68565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061296f565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016129d2846110b5565b6129dc9190614326565b9050600060076000848152602001908152602001600020549050818114612ac1576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612b469190614326565b9050600060096000848152602001908152602001600020549050600060088381548110612b9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110612be4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612c80836110b5565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5b90613fa8565b60405180910390fd5b612d6d81611e29565b15612dad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da490613ec8565b60405180910390fd5b612db960008383612671565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e099190614245565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054612ee190614410565b90600052602060002090601f016020900481019282612f035760008555612f4a565b82601f10612f1c57805160ff1916838001178555612f4a565b82800160010185558215612f4a579182015b82811115612f49578251825591602001919060010190612f2e565b5b509050612f579190612f5b565b5090565b5b80821115612f74576000816000905550600101612f5c565b5090565b6000612f8b612f8684614154565b614123565b905082815260208101848484011115612fa357600080fd5b612fae8482856143ce565b509392505050565b6000612fc9612fc484614184565b614123565b905082815260208101848484011115612fe157600080fd5b612fec8482856143ce565b509392505050565b60008135905061300381614589565b92915050565b600081359050613018816145a0565b92915050565b60008135905061302d816145b7565b92915050565b600081519050613042816145b7565b92915050565b600082601f83011261305957600080fd5b8135613069848260208601612f78565b91505092915050565b600082601f83011261308357600080fd5b8135613093848260208601612fb6565b91505092915050565b6000813590506130ab816145ce565b92915050565b6000602082840312156130c357600080fd5b60006130d184828501612ff4565b91505092915050565b600080604083850312156130ed57600080fd5b60006130fb85828601612ff4565b925050602061310c85828601612ff4565b9150509250929050565b60008060006060848603121561312b57600080fd5b600061313986828701612ff4565b935050602061314a86828701612ff4565b925050604061315b8682870161309c565b9150509250925092565b6000806000806080858703121561317b57600080fd5b600061318987828801612ff4565b945050602061319a87828801612ff4565b93505060406131ab8782880161309c565b925050606085013567ffffffffffffffff8111156131c857600080fd5b6131d487828801613048565b91505092959194509250565b600080604083850312156131f357600080fd5b600061320185828601612ff4565b925050602061321285828601613009565b9150509250929050565b6000806040838503121561322f57600080fd5b600061323d85828601612ff4565b925050602061324e8582860161309c565b9150509250929050565b60006020828403121561326a57600080fd5b600061327884828501613009565b91505092915050565b60006020828403121561329357600080fd5b60006132a18482850161301e565b91505092915050565b6000602082840312156132bc57600080fd5b60006132ca84828501613033565b91505092915050565b6000602082840312156132e557600080fd5b600082013567ffffffffffffffff8111156132ff57600080fd5b61330b84828501613072565b91505092915050565b60006020828403121561332657600080fd5b60006133348482850161309c565b91505092915050565b60006133498383613d13565b60208301905092915050565b61335e8161435a565b82525050565b600061336f826141d9565b6133798185614207565b9350613384836141b4565b8060005b838110156133b557815161339c888261333d565b97506133a7836141fa565b925050600181019050613388565b5085935050505092915050565b6133cb8161436c565b82525050565b60006133dc826141e4565b6133e68185614218565b93506133f68185602086016143dd565b6133ff81614578565b840191505092915050565b6000613415826141ef565b61341f8185614229565b935061342f8185602086016143dd565b61343881614578565b840191505092915050565b600061344e826141ef565b613458818561423a565b93506134688185602086016143dd565b80840191505092915050565b6000815461348181614410565b61348b818661423a565b945060018216600081146134a657600181146134b7576134ea565b60ff198316865281860193506134ea565b6134c0856141c4565b60005b838110156134e2578154818901526001820191506020810190506134c3565b838801955050505b50505092915050565b6000613500602b83614229565b91507f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008301527f74206f6620626f756e64730000000000000000000000000000000000000000006020830152604082019050919050565b6000613566601483614229565b91507f53616c6520686173206265656e207061757365640000000000000000000000006000830152602082019050919050565b60006135a6603283614229565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b600061360c602683614229565b91507f4d696e74696e672074686973206d616e7920776f756c6420657863656564207360008301527f7570706c792100000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613672602683614229565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006136d8601c83614229565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b6000613718602483614229565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061377e601983614229565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b60006137be602c83614229565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613824603883614229565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061388a602a83614229565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006138f0602983614229565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613956602083614229565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000613996602c83614229565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006139fc602083614229565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613a3c602983614229565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613aa2602f83614229565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000613b08602f83614229565b91507f54686572652069732061206c696d6974206f6e206d696e74696e6720746f6f2060008301527f6d616e7920617420612074696d652100000000000000000000000000000000006020830152604082019050919050565b6000613b6e602183614229565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613bd4601683614229565b91507f4e6f7420656e6f7567682065746865722073656e7421000000000000000000006000830152602082019050919050565b6000613c14603183614229565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613c7a602c83614229565b91507f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008301527f7574206f6620626f756e647300000000000000000000000000000000000000006020830152604082019050919050565b6000613ce0601783614229565b91507f4d757374206d696e742061746c656173742031204e46540000000000000000006000830152602082019050919050565b613d1c816143c4565b82525050565b613d2b816143c4565b82525050565b6000613d3d8286613443565b9150613d498285613443565b9150613d558284613474565b9150819050949350505050565b6000602082019050613d776000830184613355565b92915050565b6000608082019050613d926000830187613355565b613d9f6020830186613355565b613dac6040830185613d22565b8181036060830152613dbe81846133d1565b905095945050505050565b60006020820190508181036000830152613de38184613364565b905092915050565b6000602082019050613e0060008301846133c2565b92915050565b60006020820190508181036000830152613e20818461340a565b905092915050565b60006020820190508181036000830152613e41816134f3565b9050919050565b60006020820190508181036000830152613e6181613559565b9050919050565b60006020820190508181036000830152613e8181613599565b9050919050565b60006020820190508181036000830152613ea1816135ff565b9050919050565b60006020820190508181036000830152613ec181613665565b9050919050565b60006020820190508181036000830152613ee1816136cb565b9050919050565b60006020820190508181036000830152613f018161370b565b9050919050565b60006020820190508181036000830152613f2181613771565b9050919050565b60006020820190508181036000830152613f41816137b1565b9050919050565b60006020820190508181036000830152613f6181613817565b9050919050565b60006020820190508181036000830152613f818161387d565b9050919050565b60006020820190508181036000830152613fa1816138e3565b9050919050565b60006020820190508181036000830152613fc181613949565b9050919050565b60006020820190508181036000830152613fe181613989565b9050919050565b60006020820190508181036000830152614001816139ef565b9050919050565b6000602082019050818103600083015261402181613a2f565b9050919050565b6000602082019050818103600083015261404181613a95565b9050919050565b6000602082019050818103600083015261406181613afb565b9050919050565b6000602082019050818103600083015261408181613b61565b9050919050565b600060208201905081810360008301526140a181613bc7565b9050919050565b600060208201905081810360008301526140c181613c07565b9050919050565b600060208201905081810360008301526140e181613c6d565b9050919050565b6000602082019050818103600083015261410181613cd3565b9050919050565b600060208201905061411d6000830184613d22565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561414a57614149614549565b5b8060405250919050565b600067ffffffffffffffff82111561416f5761416e614549565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561419f5761419e614549565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614250826143c4565b915061425b836143c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142905761428f6144bc565b5b828201905092915050565b60006142a6826143c4565b91506142b1836143c4565b9250826142c1576142c06144eb565b5b828204905092915050565b60006142d7826143c4565b91506142e2836143c4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561431b5761431a6144bc565b5b828202905092915050565b6000614331826143c4565b915061433c836143c4565b92508282101561434f5761434e6144bc565b5b828203905092915050565b6000614365826143a4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156143fb5780820151818401526020810190506143e0565b8381111561440a576000848401525b50505050565b6000600282049050600182168061442857607f821691505b6020821081141561443c5761443b61451a565b5b50919050565b600061444d826143c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144805761447f6144bc565b5b600182019050919050565b6000614496826143c4565b91506144a1836143c4565b9250826144b1576144b06144eb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6145928161435a565b811461459d57600080fd5b50565b6145a98161436c565b81146145b457600080fd5b50565b6145c081614378565b81146145cb57600080fd5b50565b6145d7816143c4565b81146145e257600080fd5b5056fea26469706673582212201eccc26b1eb47ff0e4eae6c37f1d7d4a35d3fb38067546fdcf08c3e36e0ff06364736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c8063714c539811610123578063b88d4fde116100ab578063d6e7b8e41161006f578063d6e7b8e4146107ea578063da3ef23f14610815578063da87741b1461083e578063e985e9c51461087b578063f2fde38b146108b857610225565b8063b88d4fde14610703578063bd3e19d41461072c578063c668286214610757578063c87b56dd14610782578063d5abeb01146107bf57610225565b806392de3bd4116100f257806392de3bd41461063d57806395d89b4114610668578063a0712d6814610693578063a22cb465146106af578063b187bd26146106d857610225565b8063714c5398146105a7578063715018a6146105d25780637f00c7a6146105e95780638da5cb5b1461061257610225565b80632f745c59116101b15780634f6ccce7116101755780634f6ccce71461049c57806355f804b3146104d95780635c975abb146105025780636352211e1461052d57806370a082311461056a57610225565b80632f745c59146103cb5780633ccfd60b1461040857806342842e0e1461041f57806344a0d68a146104485780634c0f38c21461047157610225565b8063095ea7b3116101f8578063095ea7b3146102f857806313faede61461032157806318160ddd1461034c578063239c70ae1461037757806323b872dd146103a257610225565b806301ffc9a71461022a57806302329a291461026757806306fdde0314610290578063081812fc146102bb575b600080fd5b34801561023657600080fd5b50610251600480360381019061024c9190613281565b6108e1565b60405161025e9190613deb565b60405180910390f35b34801561027357600080fd5b5061028e60048036038101906102899190613258565b61095b565b005b34801561029c57600080fd5b506102a56109f4565b6040516102b29190613e06565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190613314565b610a86565b6040516102ef9190613d62565b60405180910390f35b34801561030457600080fd5b5061031f600480360381019061031a919061321c565b610b0b565b005b34801561032d57600080fd5b50610336610c23565b6040516103439190614108565b60405180910390f35b34801561035857600080fd5b50610361610c29565b60405161036e9190614108565b60405180910390f35b34801561038357600080fd5b5061038c610c36565b6040516103999190614108565b60405180910390f35b3480156103ae57600080fd5b506103c960048036038101906103c49190613116565b610c3c565b005b3480156103d757600080fd5b506103f260048036038101906103ed919061321c565b610c9c565b6040516103ff9190614108565b60405180910390f35b34801561041457600080fd5b5061041d610d41565b005b34801561042b57600080fd5b5061044660048036038101906104419190613116565b610e13565b005b34801561045457600080fd5b5061046f600480360381019061046a9190613314565b610e33565b005b34801561047d57600080fd5b50610486610eb9565b6040516104939190614108565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be9190613314565b610ec3565b6040516104d09190614108565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb91906132d3565b610f5a565b005b34801561050e57600080fd5b50610517610ff0565b6040516105249190613deb565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f9190613314565b611003565b6040516105619190613d62565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c91906130b1565b6110b5565b60405161059e9190614108565b60405180910390f35b3480156105b357600080fd5b506105bc61116d565b6040516105c99190613e06565b60405180910390f35b3480156105de57600080fd5b506105e76111ff565b005b3480156105f557600080fd5b50610610600480360381019061060b9190613314565b611287565b005b34801561061e57600080fd5b5061062761130d565b6040516106349190613d62565b60405180910390f35b34801561064957600080fd5b50610652611337565b60405161065f9190613e06565b60405180910390f35b34801561067457600080fd5b5061067d6113c9565b60405161068a9190613e06565b60405180910390f35b6106ad60048036038101906106a89190613314565b61145b565b005b3480156106bb57600080fd5b506106d660048036038101906106d191906131e0565b611655565b005b3480156106e457600080fd5b506106ed6117d6565b6040516106fa9190613deb565b60405180910390f35b34801561070f57600080fd5b5061072a60048036038101906107259190613165565b6117ed565b005b34801561073857600080fd5b5061074161184f565b60405161074e9190614108565b60405180910390f35b34801561076357600080fd5b5061076c611859565b6040516107799190613e06565b60405180910390f35b34801561078e57600080fd5b506107a960048036038101906107a49190613314565b6118e7565b6040516107b69190613e06565b60405180910390f35b3480156107cb57600080fd5b506107d4611991565b6040516107e19190614108565b60405180910390f35b3480156107f657600080fd5b506107ff611997565b60405161080c9190614108565b60405180910390f35b34801561082157600080fd5b5061083c600480360381019061083791906132d3565b6119a1565b005b34801561084a57600080fd5b50610865600480360381019061086091906130b1565b611a37565b6040516108729190613dc9565b60405180910390f35b34801561088757600080fd5b506108a2600480360381019061089d91906130da565b611bb3565b6040516108af9190613deb565b60405180910390f35b3480156108c457600080fd5b506108df60048036038101906108da91906130b1565b611c47565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610954575061095382611d3f565b5b9050919050565b610963611e21565b73ffffffffffffffffffffffffffffffffffffffff1661098161130d565b73ffffffffffffffffffffffffffffffffffffffff16146109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce90613fe8565b60405180910390fd5b80601060006101000a81548160ff02191690831515021790555050565b606060008054610a0390614410565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2f90614410565b8015610a7c5780601f10610a5157610100808354040283529160200191610a7c565b820191906000526020600020905b815481529060010190602001808311610a5f57829003601f168201915b5050505050905090565b6000610a9182611e29565b610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac790613fc8565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b1682611003565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7e90614068565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610ba6611e21565b73ffffffffffffffffffffffffffffffffffffffff161480610bd55750610bd481610bcf611e21565b611bb3565b5b610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b90613f48565b60405180910390fd5b610c1e8383611e95565b505050565b600d5481565b6000600880549050905090565b600f5481565b610c4d610c47611e21565b82611f4e565b610c8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c83906140a8565b60405180910390fd5b610c9783838361202c565b505050565b6000610ca7836110b5565b8210610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf90613e28565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610d49611e21565b73ffffffffffffffffffffffffffffffffffffffff16610d6761130d565b73ffffffffffffffffffffffffffffffffffffffff1614610dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db490613fe8565b60405180910390fd5b6000610dc761130d565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610e0f573d6000803e3d6000fd5b5050565b610e2e838383604051806020016040528060008152506117ed565b505050565b610e3b611e21565b73ffffffffffffffffffffffffffffffffffffffff16610e5961130d565b73ffffffffffffffffffffffffffffffffffffffff1614610eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea690613fe8565b60405180910390fd5b80600d8190555050565b6000600e54905090565b6000610ecd610c29565b8210610f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f05906140c8565b60405180910390fd5b60088281548110610f48577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b610f62611e21565b73ffffffffffffffffffffffffffffffffffffffff16610f8061130d565b73ffffffffffffffffffffffffffffffffffffffff1614610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd90613fe8565b60405180910390fd5b80600b9080519060200190610fec929190612ed5565b5050565b601060009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a390613f88565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111d90613f68565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600b805461117c90614410565b80601f01602080910402602001604051908101604052809291908181526020018280546111a890614410565b80156111f55780601f106111ca576101008083540402835291602001916111f5565b820191906000526020600020905b8154815290600101906020018083116111d857829003601f168201915b5050505050905090565b611207611e21565b73ffffffffffffffffffffffffffffffffffffffff1661122561130d565b73ffffffffffffffffffffffffffffffffffffffff161461127b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127290613fe8565b60405180910390fd5b6112856000612288565b565b61128f611e21565b73ffffffffffffffffffffffffffffffffffffffff166112ad61130d565b73ffffffffffffffffffffffffffffffffffffffff1614611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90613fe8565b60405180910390fd5b80600f8190555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600c805461134690614410565b80601f016020809104026020016040519081016040528092919081815260200182805461137290614410565b80156113bf5780601f10611394576101008083540402835291602001916113bf565b820191906000526020600020905b8154815290600101906020018083116113a257829003601f168201915b5050505050905090565b6060600180546113d890614410565b80601f016020809104026020016040519081016040528092919081815260200182805461140490614410565b80156114515780601f1061142657610100808354040283529160200191611451565b820191906000526020600020905b81548152906001019060200180831161143457829003601f168201915b5050505050905090565b6000611465610c29565b9050601060009054906101000a900460ff16156114b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ae90613e48565b60405180910390fd5b600082116114fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f1906140e8565b60405180910390fd5b600f5482111561153f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153690614048565b60405180910390fd5b600e54828261154e9190614245565b111561158f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158690613e88565b60405180910390fd5b61159761130d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461161a5781600d546115d791906142cc565b341015611619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161090614088565b60405180910390fd5b5b6000600190505b8281116116505761163d3382846116389190614245565b61234e565b808061164890614442565b915050611621565b505050565b61165d611e21565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c290613f08565b60405180910390fd5b80600560006116d8611e21565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611785611e21565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117ca9190613deb565b60405180910390a35050565b6000601060009054906101000a900460ff16905090565b6117fe6117f8611e21565b83611f4e565b61183d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611834906140a8565b60405180910390fd5b6118498484848461236c565b50505050565b6000600d54905090565b600c805461186690614410565b80601f016020809104026020016040519081016040528092919081815260200182805461189290614410565b80156118df5780601f106118b4576101008083540402835291602001916118df565b820191906000526020600020905b8154815290600101906020018083116118c257829003601f168201915b505050505081565b60606118f282611e29565b611931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192890614028565b60405180910390fd5b600061193b6123c8565b9050600081511161195b5760405180602001604052806000815250611989565b806119658461245a565b600c60405160200161197993929190613d31565b6040516020818303038152906040525b915050919050565b600e5481565b6000600f54905090565b6119a9611e21565b73ffffffffffffffffffffffffffffffffffffffff166119c761130d565b73ffffffffffffffffffffffffffffffffffffffff1614611a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1490613fe8565b60405180910390fd5b80600c9080519060200190611a33929190612ed5565b5050565b60606000611a44836110b5565b90506000811415611ac757600067ffffffffffffffff811115611a90577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611abe5781602001602082028036833780820191505090505b50915050611bae565b60008167ffffffffffffffff811115611b09577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611b375781602001602082028036833780820191505090505b50905060005b82811015611ba757611b4f8582610c9c565b828281518110611b88577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080611b9f90614442565b915050611b3d565b5080925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c4f611e21565b73ffffffffffffffffffffffffffffffffffffffff16611c6d61130d565b73ffffffffffffffffffffffffffffffffffffffff1614611cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cba90613fe8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2a90613ea8565b60405180910390fd5b611d3c81612288565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611e0a57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611e1a5750611e1982612607565b5b9050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611f0883611003565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611f5982611e29565b611f98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8f90613f28565b60405180910390fd5b6000611fa383611003565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061201257508373ffffffffffffffffffffffffffffffffffffffff16611ffa84610a86565b73ffffffffffffffffffffffffffffffffffffffff16145b8061202357506120228185611bb3565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661204c82611003565b73ffffffffffffffffffffffffffffffffffffffff16146120a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161209990614008565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210990613ee8565b60405180910390fd5b61211d838383612671565b612128600082611e95565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121789190614326565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121cf9190614245565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612368828260405180602001604052806000815250612785565b5050565b61237784848461202c565b612383848484846127e0565b6123c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b990613e68565b60405180910390fd5b50505050565b6060600b80546123d790614410565b80601f016020809104026020016040519081016040528092919081815260200182805461240390614410565b80156124505780601f1061242557610100808354040283529160200191612450565b820191906000526020600020905b81548152906001019060200180831161243357829003601f168201915b5050505050905090565b606060008214156124a2576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612602565b600082905060005b600082146124d45780806124bd90614442565b915050600a826124cd919061429b565b91506124aa565b60008167ffffffffffffffff811115612516577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156125485781602001600182028036833780820191505090505b5090505b600085146125fb576001826125619190614326565b9150600a85612570919061448b565b603061257c9190614245565b60f81b8183815181106125b8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125f4919061429b565b945061254c565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61267c838383612977565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126bf576126ba8161297c565b6126fe565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146126fd576126fc83826129c5565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156127415761273c81612b32565b612780565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461277f5761277e8282612c75565b5b5b505050565b61278f8383612cf4565b61279c60008484846127e0565b6127db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d290613e68565b60405180910390fd5b505050565b60006128018473ffffffffffffffffffffffffffffffffffffffff16612ec2565b1561296a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261282a611e21565b8786866040518563ffffffff1660e01b815260040161284c9493929190613d7d565b602060405180830381600087803b15801561286657600080fd5b505af192505050801561289757506040513d601f19601f8201168201806040525081019061289491906132aa565b60015b61291a573d80600081146128c7576040519150601f19603f3d011682016040523d82523d6000602084013e6128cc565b606091505b50600081511415612912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290990613e68565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061296f565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016129d2846110b5565b6129dc9190614326565b9050600060076000848152602001908152602001600020549050818114612ac1576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612b469190614326565b9050600060096000848152602001908152602001600020549050600060088381548110612b9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110612be4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612c59577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612c80836110b5565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5b90613fa8565b60405180910390fd5b612d6d81611e29565b15612dad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612da490613ec8565b60405180910390fd5b612db960008383612671565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e099190614245565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054612ee190614410565b90600052602060002090601f016020900481019282612f035760008555612f4a565b82601f10612f1c57805160ff1916838001178555612f4a565b82800160010185558215612f4a579182015b82811115612f49578251825591602001919060010190612f2e565b5b509050612f579190612f5b565b5090565b5b80821115612f74576000816000905550600101612f5c565b5090565b6000612f8b612f8684614154565b614123565b905082815260208101848484011115612fa357600080fd5b612fae8482856143ce565b509392505050565b6000612fc9612fc484614184565b614123565b905082815260208101848484011115612fe157600080fd5b612fec8482856143ce565b509392505050565b60008135905061300381614589565b92915050565b600081359050613018816145a0565b92915050565b60008135905061302d816145b7565b92915050565b600081519050613042816145b7565b92915050565b600082601f83011261305957600080fd5b8135613069848260208601612f78565b91505092915050565b600082601f83011261308357600080fd5b8135613093848260208601612fb6565b91505092915050565b6000813590506130ab816145ce565b92915050565b6000602082840312156130c357600080fd5b60006130d184828501612ff4565b91505092915050565b600080604083850312156130ed57600080fd5b60006130fb85828601612ff4565b925050602061310c85828601612ff4565b9150509250929050565b60008060006060848603121561312b57600080fd5b600061313986828701612ff4565b935050602061314a86828701612ff4565b925050604061315b8682870161309c565b9150509250925092565b6000806000806080858703121561317b57600080fd5b600061318987828801612ff4565b945050602061319a87828801612ff4565b93505060406131ab8782880161309c565b925050606085013567ffffffffffffffff8111156131c857600080fd5b6131d487828801613048565b91505092959194509250565b600080604083850312156131f357600080fd5b600061320185828601612ff4565b925050602061321285828601613009565b9150509250929050565b6000806040838503121561322f57600080fd5b600061323d85828601612ff4565b925050602061324e8582860161309c565b9150509250929050565b60006020828403121561326a57600080fd5b600061327884828501613009565b91505092915050565b60006020828403121561329357600080fd5b60006132a18482850161301e565b91505092915050565b6000602082840312156132bc57600080fd5b60006132ca84828501613033565b91505092915050565b6000602082840312156132e557600080fd5b600082013567ffffffffffffffff8111156132ff57600080fd5b61330b84828501613072565b91505092915050565b60006020828403121561332657600080fd5b60006133348482850161309c565b91505092915050565b60006133498383613d13565b60208301905092915050565b61335e8161435a565b82525050565b600061336f826141d9565b6133798185614207565b9350613384836141b4565b8060005b838110156133b557815161339c888261333d565b97506133a7836141fa565b925050600181019050613388565b5085935050505092915050565b6133cb8161436c565b82525050565b60006133dc826141e4565b6133e68185614218565b93506133f68185602086016143dd565b6133ff81614578565b840191505092915050565b6000613415826141ef565b61341f8185614229565b935061342f8185602086016143dd565b61343881614578565b840191505092915050565b600061344e826141ef565b613458818561423a565b93506134688185602086016143dd565b80840191505092915050565b6000815461348181614410565b61348b818661423a565b945060018216600081146134a657600181146134b7576134ea565b60ff198316865281860193506134ea565b6134c0856141c4565b60005b838110156134e2578154818901526001820191506020810190506134c3565b838801955050505b50505092915050565b6000613500602b83614229565b91507f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008301527f74206f6620626f756e64730000000000000000000000000000000000000000006020830152604082019050919050565b6000613566601483614229565b91507f53616c6520686173206265656e207061757365640000000000000000000000006000830152602082019050919050565b60006135a6603283614229565b91507f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008301527f63656976657220696d706c656d656e74657200000000000000000000000000006020830152604082019050919050565b600061360c602683614229565b91507f4d696e74696e672074686973206d616e7920776f756c6420657863656564207360008301527f7570706c792100000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613672602683614229565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006136d8601c83614229565b91507f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006000830152602082019050919050565b6000613718602483614229565b91507f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061377e601983614229565b91507f4552433732313a20617070726f766520746f2063616c6c6572000000000000006000830152602082019050919050565b60006137be602c83614229565b91507f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b6000613824603883614229565b91507f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006020830152604082019050919050565b600061388a602a83614229565b91507f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008301527f726f2061646472657373000000000000000000000000000000000000000000006020830152604082019050919050565b60006138f0602983614229565b91507f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008301527f656e7420746f6b656e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613956602083614229565b91507f4552433732313a206d696e7420746f20746865207a65726f20616464726573736000830152602082019050919050565b6000613996602c83614229565b91507f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008301527f697374656e7420746f6b656e00000000000000000000000000000000000000006020830152604082019050919050565b60006139fc602083614229565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613a3c602983614229565b91507f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008301527f73206e6f74206f776e00000000000000000000000000000000000000000000006020830152604082019050919050565b6000613aa2602f83614229565b91507f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006020830152604082019050919050565b6000613b08602f83614229565b91507f54686572652069732061206c696d6974206f6e206d696e74696e6720746f6f2060008301527f6d616e7920617420612074696d652100000000000000000000000000000000006020830152604082019050919050565b6000613b6e602183614229565b91507f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008301527f72000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613bd4601683614229565b91507f4e6f7420656e6f7567682065746865722073656e7421000000000000000000006000830152602082019050919050565b6000613c14603183614229565b91507f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006020830152604082019050919050565b6000613c7a602c83614229565b91507f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008301527f7574206f6620626f756e647300000000000000000000000000000000000000006020830152604082019050919050565b6000613ce0601783614229565b91507f4d757374206d696e742061746c656173742031204e46540000000000000000006000830152602082019050919050565b613d1c816143c4565b82525050565b613d2b816143c4565b82525050565b6000613d3d8286613443565b9150613d498285613443565b9150613d558284613474565b9150819050949350505050565b6000602082019050613d776000830184613355565b92915050565b6000608082019050613d926000830187613355565b613d9f6020830186613355565b613dac6040830185613d22565b8181036060830152613dbe81846133d1565b905095945050505050565b60006020820190508181036000830152613de38184613364565b905092915050565b6000602082019050613e0060008301846133c2565b92915050565b60006020820190508181036000830152613e20818461340a565b905092915050565b60006020820190508181036000830152613e41816134f3565b9050919050565b60006020820190508181036000830152613e6181613559565b9050919050565b60006020820190508181036000830152613e8181613599565b9050919050565b60006020820190508181036000830152613ea1816135ff565b9050919050565b60006020820190508181036000830152613ec181613665565b9050919050565b60006020820190508181036000830152613ee1816136cb565b9050919050565b60006020820190508181036000830152613f018161370b565b9050919050565b60006020820190508181036000830152613f2181613771565b9050919050565b60006020820190508181036000830152613f41816137b1565b9050919050565b60006020820190508181036000830152613f6181613817565b9050919050565b60006020820190508181036000830152613f818161387d565b9050919050565b60006020820190508181036000830152613fa1816138e3565b9050919050565b60006020820190508181036000830152613fc181613949565b9050919050565b60006020820190508181036000830152613fe181613989565b9050919050565b60006020820190508181036000830152614001816139ef565b9050919050565b6000602082019050818103600083015261402181613a2f565b9050919050565b6000602082019050818103600083015261404181613a95565b9050919050565b6000602082019050818103600083015261406181613afb565b9050919050565b6000602082019050818103600083015261408181613b61565b9050919050565b600060208201905081810360008301526140a181613bc7565b9050919050565b600060208201905081810360008301526140c181613c07565b9050919050565b600060208201905081810360008301526140e181613c6d565b9050919050565b6000602082019050818103600083015261410181613cd3565b9050919050565b600060208201905061411d6000830184613d22565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561414a57614149614549565b5b8060405250919050565b600067ffffffffffffffff82111561416f5761416e614549565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561419f5761419e614549565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614250826143c4565b915061425b836143c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156142905761428f6144bc565b5b828201905092915050565b60006142a6826143c4565b91506142b1836143c4565b9250826142c1576142c06144eb565b5b828204905092915050565b60006142d7826143c4565b91506142e2836143c4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561431b5761431a6144bc565b5b828202905092915050565b6000614331826143c4565b915061433c836143c4565b92508282101561434f5761434e6144bc565b5b828203905092915050565b6000614365826143a4565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156143fb5780820151818401526020810190506143e0565b8381111561440a576000848401525b50505050565b6000600282049050600182168061442857607f821691505b6020821081141561443c5761443b61451a565b5b50919050565b600061444d826143c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156144805761447f6144bc565b5b600182019050919050565b6000614496826143c4565b91506144a1836143c4565b9250826144b1576144b06144eb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6145928161435a565b811461459d57600080fd5b50565b6145a98161436c565b81146145b457600080fd5b50565b6145c081614378565b81146145cb57600080fd5b50565b6145d7816143c4565b81146145e257600080fd5b5056fea26469706673582212201eccc26b1eb47ff0e4eae6c37f1d7d4a35d3fb38067546fdcf08c3e36e0ff06364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 131,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 135,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 139,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 143,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 149,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1068,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1072,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1075,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2165,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 2168,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "baseExtension",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 2171,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "cost",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2174,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "maxSupply",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2177,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2180,
        "contract": "contracts/NFT.sol:NFTMEME",
        "label": "paused",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}